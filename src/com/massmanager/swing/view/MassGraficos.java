/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.massmanager.swing.view;

import com.massmanager.swing.model.Conexion;
import com.massmanager.swing.model.DatosGraficos;
import com.massmanager.swing.model.GestionArchivos;
import com.massmanager.swing.model.QuerysAnuales;
import com.massmanager.swing.model.QuerysPeriodicas;
import com.massmanager.swing.model.Utils;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Artsk
 */
public class MassGraficos extends javax.swing.JInternalFrame {

    //Guarda imagenes, archivos
    JFileChooser seleccionado = new JFileChooser();
    File archivo;
    byte[] bytesImg;
    GestionArchivos gestion = new GestionArchivos();

    //JFreeChart Grafica;
    JFreeChart GraficaMensual;
    JFreeChart GraficaAnual;
    JFreeChart GraficaPeriodica;
    JFreeChart GraficaTorta;
    //Mensual
    DefaultCategoryDataset Sector = new DefaultCategoryDataset();
    DefaultCategoryDataset Extremidad = new DefaultCategoryDataset();
    DefaultCategoryDataset Area = new DefaultCategoryDataset();
    DefaultCategoryDataset Tipo = new DefaultCategoryDataset();
    DefaultCategoryDataset Lesion = new DefaultCategoryDataset();
    //Anual
    DefaultCategoryDataset ASector = new DefaultCategoryDataset();
    DefaultCategoryDataset AExtremidad = new DefaultCategoryDataset();
    DefaultCategoryDataset AArea = new DefaultCategoryDataset();
    DefaultCategoryDataset ATipo = new DefaultCategoryDataset();
    DefaultCategoryDataset ALesion = new DefaultCategoryDataset();
    //Periodico
    DefaultCategoryDataset PSector = new DefaultCategoryDataset();
    DefaultCategoryDataset PExtremidad = new DefaultCategoryDataset();
    DefaultCategoryDataset PArea = new DefaultCategoryDataset();
    DefaultCategoryDataset PTipo = new DefaultCategoryDataset();
    DefaultCategoryDataset PLesion = new DefaultCategoryDataset();
    //Torta
    DefaultPieDataset Torta = new DefaultPieDataset();
    DefaultPieDataset Torta2 = new DefaultPieDataset();

    /**
     * Creates new form PruebaMass
     */
    public MassGraficos() {
        initComponents();
        ((BasicInternalFrameUI) this.getUI()).setNorthPane(null);

        grupoMensual.add(rdArea);
        grupoMensual.add(rdSector);
        grupoMensual.add(rdExtremidad);
        grupoMensual.add(rdTipo);
        grupoMensual.add(rdLesion);

        grupoAnual.add(rdArea2);
        grupoAnual.add(rdSector2);
        grupoAnual.add(rdExtremidad2);
        grupoAnual.add(rdTipo2);
        grupoAnual.add(rdLesion2);

        grupoPeriodico1.add(rdArea3);
        grupoPeriodico1.add(rdSector3);
        grupoPeriodico1.add(rdExtremidad3);
        grupoPeriodico1.add(rdTipo3);
        grupoPeriodico1.add(rdLesion3);

        grupoPeriodico2.add(rdSemestre);
        grupoPeriodico2.add(rdTrimestre);

        grupoTortaTiempo.add(rdTortaAnual);
        grupoTortaTiempo.add(rdTortaTrimestral);
        grupoTortaTiempo.add(rdTortaSemestral);

        grupoTortaSectores.add(rdTortaSector);
        grupoTortaSectores.add(rdTortaArea);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoMensual = new javax.swing.ButtonGroup();
        grupoAnual = new javax.swing.ButtonGroup();
        grupoPeriodico1 = new javax.swing.ButtonGroup();
        grupoPeriodico2 = new javax.swing.ButtonGroup();
        grupoTortaTiempo = new javax.swing.ButtonGroup();
        grupoTortaSectores = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panelMensual = new javax.swing.JPanel();
        panelGraficoMensual = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnGraficarMensual = new javax.swing.JButton();
        panelFiltroMensual = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        boxMes = new javax.swing.JComboBox();
        panelIncidenciaMensual = new javax.swing.JPanel();
        rdExtremidad = new javax.swing.JRadioButton();
        rdSector = new javax.swing.JRadioButton();
        rdArea = new javax.swing.JRadioButton();
        rdTipo = new javax.swing.JRadioButton();
        rdLesion = new javax.swing.JRadioButton();
        btnGuardarMensual = new javax.swing.JButton();
        panelAnual = new javax.swing.JPanel();
        btnGraficarAnual = new javax.swing.JButton();
        panelFiltroAnual = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        boxAnual = new javax.swing.JComboBox();
        panelIncidenciaAnual = new javax.swing.JPanel();
        rdExtremidad2 = new javax.swing.JRadioButton();
        rdSector2 = new javax.swing.JRadioButton();
        rdArea2 = new javax.swing.JRadioButton();
        rdTipo2 = new javax.swing.JRadioButton();
        rdLesion2 = new javax.swing.JRadioButton();
        panelGraficoAnual = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        btnGuardarAnual = new javax.swing.JButton();
        panelPeriodico = new javax.swing.JPanel();
        btnGraficarPeriodico = new javax.swing.JButton();
        panelFiltroPeriodico = new javax.swing.JPanel();
        boxPeriodico = new javax.swing.JComboBox();
        rdSemestre = new javax.swing.JRadioButton();
        rdTrimestre = new javax.swing.JRadioButton();
        panelIncidenciaPeriodico = new javax.swing.JPanel();
        rdExtremidad3 = new javax.swing.JRadioButton();
        rdSector3 = new javax.swing.JRadioButton();
        rdArea3 = new javax.swing.JRadioButton();
        rdTipo3 = new javax.swing.JRadioButton();
        rdLesion3 = new javax.swing.JRadioButton();
        panelGraficoPeriodico = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        btnGuardarPeriodico = new javax.swing.JButton();
        panelTorta = new javax.swing.JPanel();
        panelGraficoTorta = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        btnGraficarTorta = new javax.swing.JButton();
        btnGuardaTorta = new javax.swing.JButton();
        panelTortaFiltro1 = new javax.swing.JPanel();
        boxTortaTiempo = new javax.swing.JComboBox();
        rdTortaSemestral = new javax.swing.JRadioButton();
        rdTortaTrimestral = new javax.swing.JRadioButton();
        rdTortaAnual = new javax.swing.JRadioButton();
        panelFiltroTorta2 = new javax.swing.JPanel();
        rdTortaSector = new javax.swing.JRadioButton();
        rdTortaArea = new javax.swing.JRadioButton();
        boxTortaArea = new javax.swing.JComboBox();
        boxTortaSector = new javax.swing.JComboBox();

        setBackground(new java.awt.Color(93, 130, 189));
        setClosable(true);
        setTitle("Reportes Graficos");
        setPreferredSize(new java.awt.Dimension(1180, 662));

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(250, 78));
        jTabbedPane1.setName(""); // NOI18N

        panelMensual.setBackground(new java.awt.Color(255, 255, 255));
        panelMensual.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        panelGraficoMensual.setBackground(new java.awt.Color(255, 255, 255));
        panelGraficoMensual.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 102, 204), null));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/massmanager/swing/view/logolirquenGrande.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");

        javax.swing.GroupLayout panelGraficoMensualLayout = new javax.swing.GroupLayout(panelGraficoMensual);
        panelGraficoMensual.setLayout(panelGraficoMensualLayout);
        panelGraficoMensualLayout.setHorizontalGroup(
            panelGraficoMensualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGraficoMensualLayout.createSequentialGroup()
                .addContainerGap(372, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(371, 371, 371))
        );
        panelGraficoMensualLayout.setVerticalGroup(
            panelGraficoMensualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGraficoMensualLayout.createSequentialGroup()
                .addGap(160, 160, 160)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnGraficarMensual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/massmanager/swing/view/Images/chart-bar.png"))); // NOI18N
        btnGraficarMensual.setText("Graficar");
        btnGraficarMensual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGraficarMensualActionPerformed(evt);
            }
        });

        panelFiltroMensual.setBackground(new java.awt.Color(255, 255, 255));
        panelFiltroMensual.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Filtro Mensual")));

        jLabel1.setText("Mes a Graficar:");

        boxMes.setBackground(new java.awt.Color(250, 250, 250));
        boxMes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));

        javax.swing.GroupLayout panelFiltroMensualLayout = new javax.swing.GroupLayout(panelFiltroMensual);
        panelFiltroMensual.setLayout(panelFiltroMensualLayout);
        panelFiltroMensualLayout.setHorizontalGroup(
            panelFiltroMensualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFiltroMensualLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelFiltroMensualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boxMes, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );
        panelFiltroMensualLayout.setVerticalGroup(
            panelFiltroMensualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFiltroMensualLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(boxMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelIncidenciaMensual.setBackground(new java.awt.Color(255, 255, 255));
        panelIncidenciaMensual.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Filtro Incidencia"), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.Color.white)); // NOI18N

        rdExtremidad.setBackground(new java.awt.Color(255, 255, 255));
        rdExtremidad.setText("Extremidad");
        rdExtremidad.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        rdSector.setBackground(new java.awt.Color(255, 255, 255));
        rdSector.setText("Sector");
        rdSector.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        rdArea.setBackground(new java.awt.Color(255, 255, 255));
        rdArea.setText("Area");
        rdArea.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        rdTipo.setBackground(new java.awt.Color(255, 255, 255));
        rdTipo.setText("Tipo");
        rdTipo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        rdLesion.setBackground(new java.awt.Color(255, 255, 255));
        rdLesion.setText("Lesion");
        rdLesion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout panelIncidenciaMensualLayout = new javax.swing.GroupLayout(panelIncidenciaMensual);
        panelIncidenciaMensual.setLayout(panelIncidenciaMensualLayout);
        panelIncidenciaMensualLayout.setHorizontalGroup(
            panelIncidenciaMensualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelIncidenciaMensualLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelIncidenciaMensualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdLesion, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdExtremidad, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdTipo)
                    .addComponent(rdSector)
                    .addComponent(rdArea))
                .addGap(32, 32, 32))
        );
        panelIncidenciaMensualLayout.setVerticalGroup(
            panelIncidenciaMensualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIncidenciaMensualLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(rdTipo)
                .addGap(18, 18, 18)
                .addComponent(rdArea)
                .addGap(18, 18, 18)
                .addComponent(rdSector)
                .addGap(18, 18, 18)
                .addComponent(rdExtremidad)
                .addGap(18, 18, 18)
                .addComponent(rdLesion)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        btnGuardarMensual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/massmanager/swing/view/Images/file-image.png"))); // NOI18N
        btnGuardarMensual.setText("Guardar");
        btnGuardarMensual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarMensualActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelMensualLayout = new javax.swing.GroupLayout(panelMensual);
        panelMensual.setLayout(panelMensualLayout);
        panelMensualLayout.setHorizontalGroup(
            panelMensualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMensualLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMensualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelIncidenciaMensual, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(panelFiltroMensual, javax.swing.GroupLayout.PREFERRED_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(btnGraficarMensual, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGuardarMensual, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelGraficoMensual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelMensualLayout.setVerticalGroup(
            panelMensualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMensualLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelFiltroMensual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelIncidenciaMensual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGraficarMensual, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGuardarMensual, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(141, Short.MAX_VALUE))
            .addComponent(panelGraficoMensual, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Incidencias Mensuales", panelMensual);

        panelAnual.setBackground(new java.awt.Color(255, 255, 255));
        panelAnual.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        btnGraficarAnual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/massmanager/swing/view/Images/chart-bar.png"))); // NOI18N
        btnGraficarAnual.setText("Graficar");
        btnGraficarAnual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGraficarAnualActionPerformed(evt);
            }
        });

        panelFiltroAnual.setBackground(new java.awt.Color(255, 255, 255));
        panelFiltroAnual.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Filtro Anual")));

        jLabel3.setText("Año a Graficar:");

        boxAnual.setBackground(new java.awt.Color(250, 250, 250));
        boxAnual.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2015" }));

        javax.swing.GroupLayout panelFiltroAnualLayout = new javax.swing.GroupLayout(panelFiltroAnual);
        panelFiltroAnual.setLayout(panelFiltroAnualLayout);
        panelFiltroAnualLayout.setHorizontalGroup(
            panelFiltroAnualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFiltroAnualLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelFiltroAnualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boxAnual, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );
        panelFiltroAnualLayout.setVerticalGroup(
            panelFiltroAnualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFiltroAnualLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(boxAnual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelIncidenciaAnual.setBackground(new java.awt.Color(255, 255, 255));
        panelIncidenciaAnual.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Filtro Incidencia"), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.Color.white)); // NOI18N

        rdExtremidad2.setBackground(new java.awt.Color(255, 255, 255));
        rdExtremidad2.setText("Extremidad");
        rdExtremidad2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        rdSector2.setBackground(new java.awt.Color(255, 255, 255));
        rdSector2.setText("Sector");
        rdSector2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        rdArea2.setBackground(new java.awt.Color(255, 255, 255));
        rdArea2.setText("Area");
        rdArea2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        rdTipo2.setBackground(new java.awt.Color(255, 255, 255));
        rdTipo2.setText("Tipo");
        rdTipo2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        rdLesion2.setBackground(new java.awt.Color(255, 255, 255));
        rdLesion2.setText("Lesion");
        rdLesion2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout panelIncidenciaAnualLayout = new javax.swing.GroupLayout(panelIncidenciaAnual);
        panelIncidenciaAnual.setLayout(panelIncidenciaAnualLayout);
        panelIncidenciaAnualLayout.setHorizontalGroup(
            panelIncidenciaAnualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIncidenciaAnualLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelIncidenciaAnualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelIncidenciaAnualLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(panelIncidenciaAnualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdExtremidad2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rdTipo2)
                            .addComponent(rdSector2)
                            .addComponent(rdArea2))
                        .addGap(32, 32, 32))
                    .addGroup(panelIncidenciaAnualLayout.createSequentialGroup()
                        .addComponent(rdLesion2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        panelIncidenciaAnualLayout.setVerticalGroup(
            panelIncidenciaAnualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIncidenciaAnualLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(rdTipo2)
                .addGap(18, 18, 18)
                .addComponent(rdArea2)
                .addGap(18, 18, 18)
                .addComponent(rdSector2)
                .addGap(18, 18, 18)
                .addComponent(rdExtremidad2)
                .addGap(18, 18, 18)
                .addComponent(rdLesion2)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        panelGraficoAnual.setBackground(new java.awt.Color(255, 255, 255));
        panelGraficoAnual.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 102, 204), null));

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/massmanager/swing/view/logolirquenGrande.jpg"))); // NOI18N
        jLabel4.setText("jLabel4");

        javax.swing.GroupLayout panelGraficoAnualLayout = new javax.swing.GroupLayout(panelGraficoAnual);
        panelGraficoAnual.setLayout(panelGraficoAnualLayout);
        panelGraficoAnualLayout.setHorizontalGroup(
            panelGraficoAnualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGraficoAnualLayout.createSequentialGroup()
                .addContainerGap(372, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(371, 371, 371))
        );
        panelGraficoAnualLayout.setVerticalGroup(
            panelGraficoAnualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGraficoAnualLayout.createSequentialGroup()
                .addGap(162, 162, 162)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnGuardarAnual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/massmanager/swing/view/Images/file-image.png"))); // NOI18N
        btnGuardarAnual.setText("Guardar");
        btnGuardarAnual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarAnualActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAnualLayout = new javax.swing.GroupLayout(panelAnual);
        panelAnual.setLayout(panelAnualLayout);
        panelAnualLayout.setHorizontalGroup(
            panelAnualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAnualLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(panelAnualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGuardarAnual)
                    .addComponent(btnGraficarAnual))
                .addContainerGap(1022, Short.MAX_VALUE))
            .addGroup(panelAnualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelAnualLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(panelAnualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(panelIncidenciaAnual, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, Short.MAX_VALUE)
                        .addComponent(panelFiltroAnual, javax.swing.GroupLayout.PREFERRED_SIZE, 130, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(panelGraficoAnual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        panelAnualLayout.setVerticalGroup(
            panelAnualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAnualLayout.createSequentialGroup()
                .addContainerGap(379, Short.MAX_VALUE)
                .addComponent(btnGraficarAnual, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGuardarAnual, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(148, 148, 148))
            .addGroup(panelAnualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelAnualLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panelFiltroAnual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(panelIncidenciaAnual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(230, Short.MAX_VALUE))
                .addComponent(panelGraficoAnual, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Incidencias Anuales", panelAnual);

        panelPeriodico.setBackground(new java.awt.Color(255, 255, 255));
        panelPeriodico.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        btnGraficarPeriodico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/massmanager/swing/view/Images/chart-bar.png"))); // NOI18N
        btnGraficarPeriodico.setText("Graficar");
        btnGraficarPeriodico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGraficarPeriodicoActionPerformed(evt);
            }
        });

        panelFiltroPeriodico.setBackground(new java.awt.Color(255, 255, 255));
        panelFiltroPeriodico.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Filtro Periódico")));

        boxPeriodico.setBackground(new java.awt.Color(250, 250, 250));

        rdSemestre.setBackground(new java.awt.Color(255, 255, 255));
        rdSemestre.setText("Semestral");
        rdSemestre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdSemestreMouseClicked(evt);
            }
        });

        rdTrimestre.setBackground(new java.awt.Color(255, 255, 255));
        rdTrimestre.setText("Trimestral");
        rdTrimestre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdTrimestreMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelFiltroPeriodicoLayout = new javax.swing.GroupLayout(panelFiltroPeriodico);
        panelFiltroPeriodico.setLayout(panelFiltroPeriodicoLayout);
        panelFiltroPeriodicoLayout.setHorizontalGroup(
            panelFiltroPeriodicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFiltroPeriodicoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFiltroPeriodicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdSemestre)
                    .addComponent(rdTrimestre))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFiltroPeriodicoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(boxPeriodico, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
        panelFiltroPeriodicoLayout.setVerticalGroup(
            panelFiltroPeriodicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFiltroPeriodicoLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(rdSemestre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdTrimestre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(boxPeriodico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelIncidenciaPeriodico.setBackground(new java.awt.Color(255, 255, 255));
        panelIncidenciaPeriodico.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Filtro Incidencia"), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.Color.white)); // NOI18N

        rdExtremidad3.setBackground(new java.awt.Color(255, 255, 255));
        rdExtremidad3.setText("Extremidad");
        rdExtremidad3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        rdSector3.setBackground(new java.awt.Color(255, 255, 255));
        rdSector3.setText("Sector");
        rdSector3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        rdArea3.setBackground(new java.awt.Color(255, 255, 255));
        rdArea3.setText("Area");
        rdArea3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        rdTipo3.setBackground(new java.awt.Color(255, 255, 255));
        rdTipo3.setText("Tipo");
        rdTipo3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        rdLesion3.setBackground(new java.awt.Color(255, 255, 255));
        rdLesion3.setText("Lesion");
        rdLesion3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout panelIncidenciaPeriodicoLayout = new javax.swing.GroupLayout(panelIncidenciaPeriodico);
        panelIncidenciaPeriodico.setLayout(panelIncidenciaPeriodicoLayout);
        panelIncidenciaPeriodicoLayout.setHorizontalGroup(
            panelIncidenciaPeriodicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIncidenciaPeriodicoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelIncidenciaPeriodicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelIncidenciaPeriodicoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(panelIncidenciaPeriodicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdExtremidad3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rdTipo3)
                            .addComponent(rdSector3)
                            .addComponent(rdArea3))
                        .addGap(32, 32, 32))
                    .addGroup(panelIncidenciaPeriodicoLayout.createSequentialGroup()
                        .addComponent(rdLesion3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        panelIncidenciaPeriodicoLayout.setVerticalGroup(
            panelIncidenciaPeriodicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIncidenciaPeriodicoLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(rdTipo3)
                .addGap(18, 18, 18)
                .addComponent(rdArea3)
                .addGap(18, 18, 18)
                .addComponent(rdSector3)
                .addGap(18, 18, 18)
                .addComponent(rdExtremidad3)
                .addGap(18, 18, 18)
                .addComponent(rdLesion3)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        panelGraficoPeriodico.setBackground(new java.awt.Color(255, 255, 255));
        panelGraficoPeriodico.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 102, 204), null));

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/massmanager/swing/view/logolirquenGrande.jpg"))); // NOI18N
        jLabel5.setText("jLabel5");

        javax.swing.GroupLayout panelGraficoPeriodicoLayout = new javax.swing.GroupLayout(panelGraficoPeriodico);
        panelGraficoPeriodico.setLayout(panelGraficoPeriodicoLayout);
        panelGraficoPeriodicoLayout.setHorizontalGroup(
            panelGraficoPeriodicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGraficoPeriodicoLayout.createSequentialGroup()
                .addContainerGap(372, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(371, 371, 371))
        );
        panelGraficoPeriodicoLayout.setVerticalGroup(
            panelGraficoPeriodicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGraficoPeriodicoLayout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnGuardarPeriodico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/massmanager/swing/view/Images/file-image.png"))); // NOI18N
        btnGuardarPeriodico.setText("Guardar");
        btnGuardarPeriodico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarPeriodicoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelPeriodicoLayout = new javax.swing.GroupLayout(panelPeriodico);
        panelPeriodico.setLayout(panelPeriodicoLayout);
        panelPeriodicoLayout.setHorizontalGroup(
            panelPeriodicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPeriodicoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPeriodicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelPeriodicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(panelIncidenciaPeriodico, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(panelFiltroPeriodico, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(panelPeriodicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnGraficarPeriodico, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGuardarPeriodico, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelGraficoPeriodico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelPeriodicoLayout.setVerticalGroup(
            panelPeriodicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPeriodicoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelFiltroPeriodico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelIncidenciaPeriodico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGraficarPeriodico, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGuardarPeriodico, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(129, Short.MAX_VALUE))
            .addComponent(panelGraficoPeriodico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Incidencias Periódicas", panelPeriodico);

        panelTorta.setBackground(new java.awt.Color(255, 255, 255));
        panelTorta.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        panelGraficoTorta.setBackground(new java.awt.Color(255, 255, 255));
        panelGraficoTorta.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 102, 204), null));
        panelGraficoTorta.setEnabled(false);

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/massmanager/swing/view/logolirquenGrande.jpg"))); // NOI18N
        jLabel6.setText("jLabel6");

        javax.swing.GroupLayout panelGraficoTortaLayout = new javax.swing.GroupLayout(panelGraficoTorta);
        panelGraficoTorta.setLayout(panelGraficoTortaLayout);
        panelGraficoTortaLayout.setHorizontalGroup(
            panelGraficoTortaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGraficoTortaLayout.createSequentialGroup()
                .addGap(370, 370, 370)
                .addComponent(jLabel6)
                .addContainerGap(373, Short.MAX_VALUE))
        );
        panelGraficoTortaLayout.setVerticalGroup(
            panelGraficoTortaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGraficoTortaLayout.createSequentialGroup()
                .addGap(164, 164, 164)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnGraficarTorta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/massmanager/swing/view/Images/chart-pie.png"))); // NOI18N
        btnGraficarTorta.setText("Graficar");
        btnGraficarTorta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGraficarTortaActionPerformed(evt);
            }
        });

        btnGuardaTorta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/massmanager/swing/view/Images/file-image.png"))); // NOI18N
        btnGuardaTorta.setText("Guardar");
        btnGuardaTorta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardaTortaActionPerformed(evt);
            }
        });

        panelTortaFiltro1.setBackground(new java.awt.Color(255, 255, 255));
        panelTortaFiltro1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Filtro Primario")));

        boxTortaTiempo.setBackground(new java.awt.Color(250, 250, 250));

        rdTortaSemestral.setBackground(new java.awt.Color(255, 255, 255));
        rdTortaSemestral.setText("Semestral");
        rdTortaSemestral.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdTortaSemestralMouseClicked(evt);
            }
        });

        rdTortaTrimestral.setBackground(new java.awt.Color(255, 255, 255));
        rdTortaTrimestral.setText("Trimestral");
        rdTortaTrimestral.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdTortaTrimestralMouseClicked(evt);
            }
        });

        rdTortaAnual.setBackground(new java.awt.Color(255, 255, 255));
        rdTortaAnual.setText("Anual");
        rdTortaAnual.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdTortaAnualMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelTortaFiltro1Layout = new javax.swing.GroupLayout(panelTortaFiltro1);
        panelTortaFiltro1.setLayout(panelTortaFiltro1Layout);
        panelTortaFiltro1Layout.setHorizontalGroup(
            panelTortaFiltro1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTortaFiltro1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(boxTortaTiempo, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
            .addGroup(panelTortaFiltro1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTortaFiltro1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdTortaSemestral)
                    .addComponent(rdTortaTrimestral)
                    .addComponent(rdTortaAnual))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelTortaFiltro1Layout.setVerticalGroup(
            panelTortaFiltro1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTortaFiltro1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(rdTortaSemestral)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdTortaTrimestral)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdTortaAnual)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(boxTortaTiempo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelFiltroTorta2.setBackground(new java.awt.Color(255, 255, 255));
        panelFiltroTorta2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Filtro Secundario"), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.Color.white)); // NOI18N

        rdTortaSector.setBackground(new java.awt.Color(255, 255, 255));
        rdTortaSector.setText("Sector");
        rdTortaSector.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdTortaSector.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdTortaSectorMouseClicked(evt);
            }
        });

        rdTortaArea.setBackground(new java.awt.Color(255, 255, 255));
        rdTortaArea.setText("Area");
        rdTortaArea.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdTortaArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdTortaAreaMouseClicked(evt);
            }
        });

        boxTortaArea.setBackground(new java.awt.Color(250, 250, 250));

        boxTortaSector.setBackground(new java.awt.Color(250, 250, 250));

        javax.swing.GroupLayout panelFiltroTorta2Layout = new javax.swing.GroupLayout(panelFiltroTorta2);
        panelFiltroTorta2.setLayout(panelFiltroTorta2Layout);
        panelFiltroTorta2Layout.setHorizontalGroup(
            panelFiltroTorta2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFiltroTorta2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rdTortaArea)
                .addGap(78, 78, 78))
            .addGroup(panelFiltroTorta2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFiltroTorta2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(boxTortaArea, 0, 105, Short.MAX_VALUE)
                    .addComponent(rdTortaSector)
                    .addComponent(boxTortaSector, 0, 105, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelFiltroTorta2Layout.setVerticalGroup(
            panelFiltroTorta2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFiltroTorta2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(rdTortaArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(boxTortaArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rdTortaSector)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(boxTortaSector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelTortaLayout = new javax.swing.GroupLayout(panelTorta);
        panelTorta.setLayout(panelTortaLayout);
        panelTortaLayout.setHorizontalGroup(
            panelTortaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTortaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTortaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelTortaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panelTortaFiltro1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(panelFiltroTorta2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelTortaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnGraficarTorta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGuardaTorta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelGraficoTorta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelTortaLayout.setVerticalGroup(
            panelTortaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTortaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelTortaFiltro1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelFiltroTorta2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGraficarTorta, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGuardaTorta, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(150, Short.MAX_VALUE))
            .addComponent(panelGraficoTorta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("% Incidencias Totales por Categoria", panelTorta);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("% Incidencias Mensuales");
        jTabbedPane1.getAccessibleContext().setAccessibleDescription("% Incidencias Mensuales");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGraficarMensualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGraficarMensualActionPerformed
        // TODO add your handling code here:
        Extremidad.clear();
        Sector.clear();
        Area.clear();
        Tipo.clear();
        Lesion.clear();
        String mes = (String) this.boxMes.getSelectedItem();
        String extremidad = "extremidad";
        String tipo = "incidente";
        String area = "area";
        String sector = "sector";
        String lesion = "lesion";

        if (rdExtremidad.isSelected()) {
            panelGraficoMensual.removeAll();
            Integer man = DatosGraficos.DatosGraficosActual("Manos", mes, extremidad);
            Integer cab = DatosGraficos.DatosGraficosActual("Cabeza", mes, extremidad);
            Integer cue = DatosGraficos.DatosGraficosActual("Cuello", mes, extremidad);
            Integer bra = DatosGraficos.DatosGraficosActual("Brazos", mes, extremidad);
            Integer tro = DatosGraficos.DatosGraficosActual("Tronco", mes, extremidad);
            Integer abd = DatosGraficos.DatosGraficosActual("Abdomen", mes, extremidad);
            Integer pi = DatosGraficos.DatosGraficosActual("Piernas", mes, extremidad);
            Integer pie = DatosGraficos.DatosGraficosActual("Pies", mes, extremidad);
            Integer cad = DatosGraficos.DatosGraficosActual("Cadera", mes, extremidad);
            Integer hom = DatosGraficos.DatosGraficosActual("Hombros", mes, extremidad);

            Integer man2 = DatosGraficos.DatosGraficosAnterior("Manos", mes, extremidad);
            Integer cab2 = DatosGraficos.DatosGraficosAnterior("Cabeza", mes, extremidad);
            Integer cue2 = DatosGraficos.DatosGraficosAnterior("Cuello", mes, extremidad);
            Integer bra2 = DatosGraficos.DatosGraficosAnterior("Brazos", mes, extremidad);
            Integer tro2 = DatosGraficos.DatosGraficosAnterior("Tronco", mes, extremidad);
            Integer abd2 = DatosGraficos.DatosGraficosAnterior("Abdomen", mes, extremidad);
            Integer pi2 = DatosGraficos.DatosGraficosAnterior("Piernas", mes, extremidad);
            Integer pie2 = DatosGraficos.DatosGraficosAnterior("Pies", mes, extremidad);
            Integer cad2 = DatosGraficos.DatosGraficosAnterior("Cadera", mes, extremidad);
            Integer hom2 = DatosGraficos.DatosGraficosAnterior("Hombros", mes, extremidad);

            //Configuracion del gráfico        
            Extremidad.addValue(man, "Mes Seleccionado", "Manos");
            Extremidad.addValue(cab, "Mes Seleccionado", "Cabeza");
            Extremidad.addValue(cue, "Mes Seleccionado", "Cuello");
            Extremidad.addValue(bra, "Mes Seleccionado", "Brazos");
            Extremidad.addValue(tro, "Mes Seleccionado", "Tronco");
            Extremidad.addValue(abd, "Mes Seleccionado", "Abdomen");
            Extremidad.addValue(pi, "Mes Seleccionado", "Piernas");
            Extremidad.addValue(pie, "Mes Seleccionado", "Pies");
            Extremidad.addValue(cad, "Mes Seleccionado", "Cadera");
            Extremidad.addValue(hom, "Mes Seleccionado", "Hombros");

            Extremidad.addValue(man2, "Mes Anterior", "Manos");
            Extremidad.addValue(cab2, "Mes Anterior", "Cabeza");
            Extremidad.addValue(cue2, "Mes Anterior", "Cuello");
            Extremidad.addValue(bra2, "Mes Anterior", "Brazos");
            Extremidad.addValue(tro2, "Mes Anterior", "Tronco");
            Extremidad.addValue(abd2, "Mes Anterior", "Abdomen");
            Extremidad.addValue(pi2, "Mes Anterior", "Piernas");
            Extremidad.addValue(pie2, "Mes Anterior", "Pies");
            Extremidad.addValue(cad2, "Mes Anterior", "Cadera");
            Extremidad.addValue(hom2, "Mes Anterior", "Hombros");

            GraficaMensual = ChartFactory.createBarChart3D("Incidencias Mensuales por Extremidad",
                    "Extremidades", "Cantidad Incidentes", Extremidad, PlotOrientation.VERTICAL, true, true, false);
        } else if (rdSector.isSelected()) {            
            panelGraficoMensual.removeAll();
            Integer cor = DatosGraficos.DatosGraficosActual("Corte", mes, sector);
            Integer lam = DatosGraficos.DatosGraficosActual("Laminado", mes, sector);
            Integer hor = DatosGraficos.DatosGraficosActual("Horno", mes, sector);
            Integer bot = DatosGraficos.DatosGraficosActual("Bottero", mes, sector);
            Integer ser = DatosGraficos.DatosGraficosActual("Serigrafia", mes, sector);
            Integer hort = DatosGraficos.DatosGraficosActual("Horno Templado", mes, sector);
            Integer sal = DatosGraficos.DatosGraficosActual("Sala armado", mes, sector);
            Integer bio = DatosGraficos.DatosGraficosActual("Bodega Bio-bio", mes, sector);
            Integer log = DatosGraficos.DatosGraficosActual("Logistica", mes, sector);
            Integer bod = DatosGraficos.DatosGraficosActual("Bodega Materiales", mes, sector);
            Integer cc = DatosGraficos.DatosGraficosActual("Control de Calidad", mes, sector);
            Integer tale = DatosGraficos.DatosGraficosActual("Taller Electrico", mes, sector);
            Integer talm = DatosGraficos.DatosGraficosActual("Taller Mecanico", mes, sector);

            Integer cor2 = DatosGraficos.DatosGraficosAnterior("Corte", mes, sector);
            Integer lam2 = DatosGraficos.DatosGraficosAnterior("Laminado", mes, sector);
            Integer hor2 = DatosGraficos.DatosGraficosAnterior("Horno", mes, sector);
            Integer bot2 = DatosGraficos.DatosGraficosAnterior("Bottero", mes, sector);
            Integer ser2 = DatosGraficos.DatosGraficosAnterior("Serigrafia", mes, sector);
            Integer hort2 = DatosGraficos.DatosGraficosAnterior("Horno Templado", mes, sector);
            Integer sal2 = DatosGraficos.DatosGraficosAnterior("Sala armado", mes, sector);
            Integer bio2 = DatosGraficos.DatosGraficosAnterior("Bodega Bio-bio", mes, sector);
            Integer log2 = DatosGraficos.DatosGraficosAnterior("Logistica", mes, sector);
            Integer bod2 = DatosGraficos.DatosGraficosAnterior("Bodega Materiales", mes, sector);
            Integer cc2 = DatosGraficos.DatosGraficosAnterior("Control de Calidad", mes, sector);
            Integer tale2 = DatosGraficos.DatosGraficosAnterior("Taller Electrico", mes, sector);
            Integer talm2 = DatosGraficos.DatosGraficosAnterior("Taller Mecanico", mes, sector);

            Sector.addValue(cor, "Mes Seleccionado", "Corte");
            Sector.addValue(lam, "Mes Seleccionado", "Lam.");
            Sector.addValue(hor, "Mes Seleccionado", "Horno");
            Sector.addValue(bot, "Mes Seleccionado", "Bott.");
            Sector.addValue(ser, "Mes Seleccionado", "Serig.");
            Sector.addValue(hort, "Mes Seleccionado", "H.Temp.");
            Sector.addValue(sal, "Mes Seleccionado", "Sala A.");
            Sector.addValue(bio, "Mes Seleccionado", "BBio");
            Sector.addValue(log, "Mes Seleccionado", "Logi.");
            Sector.addValue(bod, "Mes Seleccionado", "Bod.M.");
            Sector.addValue(cc, "Mes Seleccionado", "C.Cal.");
            Sector.addValue(tale, "Mes Seleccionado", "T.Elec.");
            Sector.addValue(talm, "Mes Seleccionado", "T.Mec.");

            Sector.addValue(cor2, "Mes Anterior", "Corte");
            Sector.addValue(lam2, "Mes Anterior", "Lam.");
            Sector.addValue(hor2, "Mes Anterior", "Horno");
            Sector.addValue(bot2, "Mes Anterior", "Bott.");
            Sector.addValue(ser2, "Mes Anterior", "Serig.");
            Sector.addValue(hort2, "Mes Anterior", "H.Temp.");
            Sector.addValue(sal2, "Mes Anterior", "Sala A.");
            Sector.addValue(bio2, "Mes Anterior", "BBio");
            Sector.addValue(log2, "Mes Anterior", "Logi.");
            Sector.addValue(bod2, "Mes Anterior", "Bod.M.");
            Sector.addValue(cc2, "Mes Anterior", "C.Cal.");
            Sector.addValue(tale2, "Mes Anterior", "T.Elec.");
            Sector.addValue(talm2, "Mes Anterior", "T.Mec.");

            GraficaMensual = ChartFactory.createBarChart3D("Incidencias Mensuales por Sector",
                    "Sectores", "Cantidad Incidentes", Sector, PlotOrientation.VERTICAL, true, true, false);
        } else if (rdArea.isSelected()) {
            panelGraficoMensual.removeAll();
            Integer bio = DatosGraficos.DatosGraficosActual("Bio-bio", mes, area);
            Integer man = DatosGraficos.DatosGraficosActual("Mantencion", mes, area);
            Integer adm = DatosGraficos.DatosGraficosActual("Administrativo", mes, area);
            Integer mass = DatosGraficos.DatosGraficosActual("Mass", mes, area);
            Integer pro = DatosGraficos.DatosGraficosActual("Produccion", mes, area);

            Integer bio2 = DatosGraficos.DatosGraficosAnterior("Bio-bio", mes, area);
            Integer man2 = DatosGraficos.DatosGraficosAnterior("Mantencion", mes, area);
            Integer adm2 = DatosGraficos.DatosGraficosAnterior("Administrativo", mes, area);
            Integer mass2 = DatosGraficos.DatosGraficosAnterior("Mass", mes, area);
            Integer pro2 = DatosGraficos.DatosGraficosAnterior("Produccion", mes, area);

            Area.addValue(bio, "Mes Seleccionado", "Bio Bio");
            Area.addValue(man, "Mes Seleccionado", "Mantención");
            Area.addValue(adm, "Mes Seleccionado", "Administrativo");
            Area.addValue(mass, "Mes Seleccionado", "Mass");
            Area.addValue(pro, "Mes Seleccionado", "Producción");

            Area.addValue(bio2, "Mes Anterior", "Bio Bio");
            Area.addValue(man2, "Mes Anterior", "Mantención");
            Area.addValue(adm2, "Mes Anterior", "Administrativo");
            Area.addValue(mass2, "Mes Anterior", "Mass");
            Area.addValue(pro2, "Mes Anterior", "Producción");

            GraficaMensual = ChartFactory.createBarChart3D("Incidencias Mensuales por Area",
                    "Areas", "Cantidad Incidentes", Area, PlotOrientation.VERTICAL, true, true, false);
        } else if (rdTipo.isSelected()) {
            panelGraficoMensual.removeAll();
            Integer lab = DatosGraficos.DatosGraficosActual("Laboral", mes, tipo);
            Integer tra = DatosGraficos.DatosGraficosActual("Tayecto", mes, tipo);

            Integer lab2 = DatosGraficos.DatosGraficosAnterior("Laboral", mes, tipo);
            Integer tra2 = DatosGraficos.DatosGraficosAnterior("Trayecto", mes, tipo);

            Tipo.addValue(lab, "Mes Seleccionado", "Laboral");
            Tipo.addValue(tra, "Mes Seleccionado", "Trayecto");

            Tipo.addValue(lab2, "Mes Anterior", "Laboral");
            Tipo.addValue(tra2, "Mes Anterior", "Trayecto");

            GraficaMensual = ChartFactory.createBarChart3D("Incidencias Mensuales por Tipo de Incidente",
                    "Tipo de Incidentes", "Cantidad Incidentes", Tipo, PlotOrientation.VERTICAL, true, true, false);
        } else if (rdLesion.isSelected()) {
            panelGraficoMensual.removeAll();
            Integer cor = DatosGraficos.DatosGraficosActual("Corte", mes, lesion);
            Integer hep = DatosGraficos.DatosGraficosActual("Herida punzante", mes, lesion);
            Integer hec = DatosGraficos.DatosGraficosActual("Herida colgajo", mes, lesion);
            Integer hea = DatosGraficos.DatosGraficosActual("Herida por abrasion", mes, lesion);
            Integer con = DatosGraficos.DatosGraficosActual("Contusion", mes, lesion);
            Integer fra = DatosGraficos.DatosGraficosActual("Fractura", mes, lesion);
            Integer que = DatosGraficos.DatosGraficosActual("Quemadura", mes, lesion);
            Integer mus = DatosGraficos.DatosGraficosActual("Muscular", mes, lesion);

            Integer cor2 = DatosGraficos.DatosGraficosAnterior("Corte", mes, lesion);
            Integer hep2 = DatosGraficos.DatosGraficosAnterior("Herida punzante", mes, lesion);
            Integer hec2 = DatosGraficos.DatosGraficosAnterior("Herida colgajo", mes, lesion);
            Integer hea2 = DatosGraficos.DatosGraficosAnterior("Herida por abrasion", mes, lesion);
            Integer con2 = DatosGraficos.DatosGraficosAnterior("Contusion", mes, lesion);
            Integer fra2 = DatosGraficos.DatosGraficosAnterior("Fractura", mes, lesion);
            Integer que2 = DatosGraficos.DatosGraficosAnterior("Quemadura", mes, lesion);
            Integer mus2 = DatosGraficos.DatosGraficosAnterior("Muscular", mes, lesion);

            Lesion.addValue(cor, "Mes Seleccionado", "Corte");
            Lesion.addValue(hep, "Mes Seleccionado", "H. Punzante");
            Lesion.addValue(hec, "Mes Seleccionado", "H. Colgajo");
            Lesion.addValue(hea, "Mes Seleccionado", "H. Abrasion");
            Lesion.addValue(con, "Mes Seleccionado", "Contusion");
            Lesion.addValue(fra, "Mes Seleccionado", "Fractura.");
            Lesion.addValue(que, "Mes Seleccionado", "Quemadura");
            Lesion.addValue(mus, "Mes Seleccionado", "Muscular");

            Lesion.addValue(cor2, "Mes Anterior", "Corte");
            Lesion.addValue(hep2, "Mes Anterior", "H. Punzante");
            Lesion.addValue(hec2, "Mes Anterior", "H. Colgajo");
            Lesion.addValue(hea2, "Mes Anterior", "H. Abrasion");
            Lesion.addValue(con2, "Mes Anterior", "Contusion");
            Lesion.addValue(fra2, "Mes Anterior", "Fractura.");
            Lesion.addValue(que2, "Mes Anterior", "Quemadura");
            Lesion.addValue(mus2, "Mes Anterior", "Muscular");

            GraficaMensual = ChartFactory.createBarChart3D("Incidencias Mensuales por Lesion",
                    "Tipo de Lesiones", "Cantidad Incidentes", Lesion, PlotOrientation.VERTICAL, true, true, false);
        } else {
            Utils.showMessageWarning("Se deben seleccionar los filtros para mostrar graficos", "Seleccione un filtro. ");
        }

        ChartPanel panelMensual = new ChartPanel(GraficaMensual);
        panelGraficoMensual.setLayout(new java.awt.BorderLayout());
        panelGraficoMensual.add(panelMensual);
        panelGraficoMensual.validate();
        /*
         try {
         ChartUtilities.saveChartAsJPEG(new File("grafico.jpg"), GraficaMensual, 1024, 768);
         } catch (IOException ex) {
         Logger.getLogger(MassGraficos.class.getName()).log(Level.SEVERE, null, ex);
         }*/
    }//GEN-LAST:event_btnGraficarMensualActionPerformed

    private void btnGraficarTortaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGraficarTortaActionPerformed
        // TODO add your handling code here:
        Torta.clear();
        panelGraficoTorta.removeAll();
        QuerysPeriodicas per = new QuerysPeriodicas();
        QuerysAnuales anual = new QuerysAnuales();
        String anio = (String) this.boxTortaTiempo.getSelectedItem();
        String semestre = (String) this.boxTortaTiempo.getSelectedItem();
        String trimestre = (String) this.boxTortaTiempo.getSelectedItem();
        
        String corte = "Corte";
        String punzante = "Herida punzante";
        String colgajo = "Herida colgajo";
        String abrasion = "Herida por abrasion";
        String contusion = "Contusion";
        String fractura = "Fractura";
        String quemadura = "Quemadura";
        String muscular = "Muscular";
        String mareos = "Mareos";
        String irritacion = "Irritacion";   
        
        if (rdTortaAnual.isSelected()) {
            Integer corteAnual = anual.countLesionAnual(corte, anio);
            Integer punzanteAnual = anual.countLesionAnual(punzante, anio);
            Integer colgajoAnual = anual.countLesionAnual(colgajo, anio);
            Integer abrasionAnual = anual.countLesionAnual(abrasion, anio);
            Integer contusionAnual = anual.countLesionAnual(contusion, anio);
            Integer fracturaAnual = anual.countLesionAnual(fractura, anio);
            Integer quemaduraAnual = anual.countLesionAnual(quemadura, anio);
            Integer muscularAnual = anual.countLesionAnual(muscular, anio);
            Integer mareosAnual = anual.countLesionAnual(mareos, anio);
            Integer irritacionAnual = anual.countLesionAnual(irritacion, anio);
            Integer sumaAnual = corteAnual + punzanteAnual + colgajoAnual + abrasionAnual + contusionAnual + fracturaAnual + quemaduraAnual + muscularAnual + mareosAnual + irritacionAnual;

            if (!rdTortaArea.isSelected() && !rdTortaSector.isSelected()) {
                if (sumaAnual > 0) {
                    if (corteAnual > 0) {
                        Torta.setValue("Corte", corteAnual);
                    }
                    if (punzanteAnual > 0) {
                        Torta.setValue("Herida Punzante", punzanteAnual);
                    }
                    if (colgajoAnual > 0) {
                        Torta.setValue("Herida Colgajo", colgajoAnual);
                    }
                    if (abrasionAnual > 0) {
                        Torta.setValue("Herida Abrasión", abrasionAnual);
                    }
                    if (contusionAnual > 0) {
                        Torta.setValue("Contusión", contusionAnual);
                    }
                    if (fracturaAnual > 0) {
                        Torta.setValue("Fractura", fracturaAnual);
                    }
                    if (quemaduraAnual > 0) {
                        Torta.setValue("Quemadura", quemaduraAnual);
                    }
                    if (muscularAnual > 0) {
                        Torta.setValue("Muscular", muscularAnual);
                    }
                    if (mareosAnual > 0) {
                        Torta.setValue("Mareos", mareosAnual);
                    }
                    if (irritacionAnual > 0) {
                        Torta.setValue("Irritación", irritacionAnual);
                    }
                    
                    GraficaTorta = ChartFactory.createPieChart("Porcentaje total de patologías año " + anio,
                            Torta, false, true, false);
                } else {
                    Utils.showMessageInfo("No existen registros para los filtros seleccionados.", "Sin registros");
                    GraficaTorta = ChartFactory.createPieChart("Porcentaje total de patologías año " + anio,
                            Torta, false, true, false);
                }
            } else if (rdTortaArea.isSelected()) {
                String variable = (String) this.boxTortaArea.getSelectedItem();
                String where = "area";

                Integer corteAnualVar = anual.countLesionAnualVariable(corte, anio, where, variable);
                Integer punzanteAnualVar = anual.countLesionAnualVariable(punzante, anio, where, variable);
                Integer colgajoAnualVar = anual.countLesionAnualVariable(colgajo, anio, where, variable);
                Integer abrasionAnualVar = anual.countLesionAnualVariable(abrasion, anio, where, variable);
                Integer contusionAnualVar = anual.countLesionAnualVariable(contusion, anio, where, variable);
                Integer fracturaAnualVar = anual.countLesionAnualVariable(fractura, anio, where, variable);
                Integer quemaduraAnualVar = anual.countLesionAnualVariable(quemadura, anio, where, variable);
                Integer muscularAnualVar = anual.countLesionAnualVariable(muscular, anio, where, variable);
                Integer mareosAnualVar = anual.countLesionAnualVariable(mareos, anio, where, variable);
                Integer irritacionAnualVar = anual.countLesionAnualVariable(irritacion, anio, where, variable);
                Integer sumaAnualVar = corteAnualVar + punzanteAnualVar + colgajoAnualVar + abrasionAnualVar + contusionAnualVar + fracturaAnualVar + quemaduraAnualVar + muscularAnualVar + mareosAnualVar + irritacionAnualVar;

                if (sumaAnualVar > 0) {
                    if (corteAnualVar > 0) {
                        Torta.setValue("Corte", corteAnualVar);
                    }
                    if (punzanteAnualVar > 0) {
                        Torta.setValue("Herida Punzante", punzanteAnualVar);
                    }
                    if (colgajoAnualVar > 0) {
                        Torta.setValue("Herida Colgajo", colgajoAnualVar);
                    }
                    if (abrasionAnualVar > 0) {
                        Torta.setValue("Herida Abrasión", abrasionAnualVar);
                    }
                    if (contusionAnualVar > 0) {
                        Torta.setValue("Contusión", contusionAnualVar);
                    }
                    if (fracturaAnualVar > 0) {
                        Torta.setValue("Fractura", fracturaAnualVar);
                    }
                    if (quemaduraAnualVar > 0) {
                        Torta.setValue("Quemadura", quemaduraAnualVar);
                    }
                    if (muscularAnualVar > 0) {
                        Torta.setValue("Muscular", muscularAnualVar);
                    }
                    if (mareosAnualVar > 0) {
                        Torta.setValue("Mareos", mareosAnualVar);
                    }
                    if (irritacionAnualVar > 0) {
                        Torta.setValue("Irritación", irritacionAnualVar);
                    }

                    GraficaTorta = ChartFactory.createPieChart("Porcentaje total de patologías del área " + variable + " año " + anio,
                            Torta, false, true, false);
                } else {
                    Utils.showMessageInfo("No existen registros para los filtros seleccionados.", "Sin registros");
                    GraficaTorta = ChartFactory.createPieChart("Porcentaje total de patologías del área " + variable + " año " + anio,
                            Torta, false, true, false);
                }
            } else if (rdTortaSector.isSelected()) {
                String variable = (String) this.boxTortaSector.getSelectedItem();
                String where = "sector";

                Integer corteAnualVar2 = anual.countLesionAnualVariable(corte, anio, where, variable);
                Integer punzanteAnualVar2 = anual.countLesionAnualVariable(punzante, anio, where, variable);
                Integer colgajoAnualVar2 = anual.countLesionAnualVariable(colgajo, anio, where, variable);
                Integer abrasionAnualVar2 = anual.countLesionAnualVariable(abrasion, anio, where, variable);
                Integer contusionAnualVar2 = anual.countLesionAnualVariable(contusion, anio, where, variable);
                Integer fracturaAnualVar2 = anual.countLesionAnualVariable(fractura, anio, where, variable);
                Integer quemaduraAnualVar2 = anual.countLesionAnualVariable(quemadura, anio, where, variable);
                Integer muscularAnualVar2 = anual.countLesionAnualVariable(muscular, anio, where, variable);
                Integer mareosAnualVar2 = anual.countLesionAnualVariable(mareos, anio, where, variable);
                Integer irritacionAnualVar2 = anual.countLesionAnualVariable(irritacion, anio, where, variable);
                Integer sumaAnualVar2 = corteAnualVar2 + punzanteAnualVar2 + colgajoAnualVar2 + abrasionAnualVar2 + contusionAnualVar2 + fracturaAnualVar2 + quemaduraAnualVar2 + muscularAnualVar2 + mareosAnualVar2 + irritacionAnualVar2;

                if (sumaAnualVar2 > 0) {
                    if (corteAnualVar2 > 0) {
                        Torta.setValue("Corte", corteAnualVar2);
                    }
                    if (punzanteAnualVar2 > 0) {
                        Torta.setValue("Herida Punzante", punzanteAnualVar2);
                    }
                    if (colgajoAnualVar2 > 0) {
                        Torta.setValue("Herida Colgajo", colgajoAnualVar2);
                    }
                    if (abrasionAnualVar2 > 0) {
                        Torta.setValue("Herida Abrasión", abrasionAnualVar2);
                    }
                    if (contusionAnualVar2 > 0) {
                        Torta.setValue("Contusión", contusionAnualVar2);
                    }
                    if (fracturaAnualVar2 > 0) {
                        Torta.setValue("Fractura", fracturaAnualVar2);
                    }
                    if (quemaduraAnualVar2 > 0) {
                        Torta.setValue("Quemadura", quemaduraAnualVar2);
                    }
                    if (muscularAnualVar2 > 0) {
                        Torta.setValue("Muscular", muscularAnualVar2);
                    }
                    if (mareosAnualVar2 > 0) {
                        Torta.setValue("Mareos", mareosAnualVar2);
                    }
                    if (irritacionAnualVar2 > 0) {
                        Torta.setValue("Irritación", irritacionAnualVar2);
                    }

                    GraficaTorta = ChartFactory.createPieChart("Porcentaje patologías del sector " + variable + " año " + anio,
                            Torta, false, true, false);
                } else {
                    Utils.showMessageInfo("No existen registros para los filtros seleccionados.", "Sin registros");
                    GraficaTorta = ChartFactory.createPieChart("Porcentaje patologías del sector " + variable + " año " + anio,
                            Torta, false, true, false);
                }
            }

        } else if (rdTortaSemestral.isSelected()) {
            String where = "semestre";
            Integer corteSemestral = per.countAtencionesPeriodicas(corte, semestre, where);
            Integer punzanteSemestral = per.countAtencionesPeriodicas(punzante, semestre, where);
            Integer colgajoSemestral = per.countAtencionesPeriodicas(colgajo, semestre, where);
            Integer abrasionSemestral = per.countAtencionesPeriodicas(abrasion, semestre, where);
            Integer contusionSemestral = per.countAtencionesPeriodicas(contusion, semestre, where);
            Integer fracturaSemestral = per.countAtencionesPeriodicas(fractura, semestre, where);
            Integer quemaduraSemestral = per.countAtencionesPeriodicas(quemadura, semestre, where);
            Integer muscularSemestral = per.countAtencionesPeriodicas(muscular, semestre, where);
            Integer mareosSemestral = per.countAtencionesPeriodicas(mareos, semestre, where);
            Integer irritacionSemestral = per.countAtencionesPeriodicas(irritacion, semestre, where);
            Integer sumaSemestral = corteSemestral + punzanteSemestral + colgajoSemestral + abrasionSemestral + contusionSemestral + fracturaSemestral + quemaduraSemestral + muscularSemestral + mareosSemestral + irritacionSemestral;

            if (!rdTortaArea.isSelected() && !rdTortaSector.isSelected()) {
                if (sumaSemestral > 0) {
                    if (corteSemestral > 0) {
                        Torta.setValue("Corte", corteSemestral);
                    }
                    if (punzanteSemestral > 0) {
                        Torta.setValue("Herida Punzante", punzanteSemestral);
                    }
                    if (colgajoSemestral > 0) {
                        Torta.setValue("Herida Colgajo", colgajoSemestral);
                    }
                    if (abrasionSemestral > 0) {
                        Torta.setValue("Herida Abrasión", abrasionSemestral);
                    }
                    if (contusionSemestral > 0) {
                        Torta.setValue("Contusión", contusionSemestral);
                    }
                    if (fracturaSemestral > 0) {
                        Torta.setValue("Fractura", fracturaSemestral);
                    }
                    if (quemaduraSemestral > 0) {
                        Torta.setValue("Quemadura", quemaduraSemestral);
                    }
                    if (muscularSemestral > 0) {
                        Torta.setValue("Muscular", muscularSemestral);
                    }
                    if (mareosSemestral > 0) {
                        Torta.setValue("Mareos", mareosSemestral);
                    }
                    if (irritacionSemestral > 0) {
                        Torta.setValue("Irritación", irritacionSemestral);
                    }

                    GraficaTorta = ChartFactory.createPieChart("Porcentaje total de patologías " + semestre + " 2015",
                            Torta, false, true, false);
                } else {
                    Utils.showMessageInfo("No existen registros para los filtros seleccionados.", "Sin registros");
                    GraficaTorta = ChartFactory.createPieChart("Porcentaje total de patologías " + semestre + " 2015",
                            Torta, false, true, false);
                }
            } else if (rdTortaArea.isSelected()) {
                String variable = "area";
                String area = (String) this.boxTortaArea.getSelectedItem();
                Integer corteSemestralVal = 0;
                Integer punzanteSemestralVal = 0;
                Integer colgajoSemestralVal = 0;
                Integer abrasionSemestralVal = 0;
                Integer contusionSemestralVal = 0;
                Integer fracturaSemestralVal = 0;
                Integer quemaduraSemestralVal = 0;
                Integer muscularSemestralVal = 0;
                Integer mareosSemestralVal = 0;
                Integer irritacionSemestralVal = 0;
                Integer sumaSemestralVal = 0;
                
                corteSemestralVal = per.countAtencionesPeriodicasVariable(corte, semestre, where, variable, area);
                punzanteSemestralVal = per.countAtencionesPeriodicasVariable(punzante, semestre, where, variable, area);
                colgajoSemestralVal = per.countAtencionesPeriodicasVariable(colgajo, semestre, where, variable, area);
                abrasionSemestralVal = per.countAtencionesPeriodicasVariable(abrasion, semestre, where, variable, area);
                contusionSemestralVal = per.countAtencionesPeriodicasVariable(contusion, semestre, where, variable, area);
                fracturaSemestralVal = per.countAtencionesPeriodicasVariable(fractura, semestre, where, variable, area);
                quemaduraSemestralVal = per.countAtencionesPeriodicasVariable(quemadura, semestre, where, variable, area);
                muscularSemestralVal = per.countAtencionesPeriodicasVariable(muscular, semestre, where, variable, area);
                mareosSemestralVal = per.countAtencionesPeriodicasVariable(mareos, semestre, where, variable, area);
                irritacionSemestralVal = per.countAtencionesPeriodicasVariable(irritacion, semestre, where, variable, area);
                sumaSemestralVal = corteSemestralVal + punzanteSemestralVal + colgajoSemestralVal + abrasionSemestralVal + contusionSemestralVal + fracturaSemestralVal + quemaduraSemestralVal + muscularSemestralVal + mareosSemestralVal + irritacionSemestralVal;

                if (sumaSemestralVal > 0) {
                    if (corteSemestralVal > 0) {
                        Torta.setValue("Corte", corteSemestralVal);
                    }
                    if (punzanteSemestralVal > 0) {
                        Torta.setValue("Herida Punzante", punzanteSemestralVal);
                    }
                    if (colgajoSemestralVal > 0) {
                        Torta.setValue("Herida Colgajo", colgajoSemestralVal);
                    }
                    if (abrasionSemestralVal > 0) {
                        Torta.setValue("Herida Abrasión", abrasionSemestralVal);
                    }
                    if (contusionSemestralVal > 0) {
                        Torta.setValue("Contusión", contusionSemestralVal);
                    }
                    if (fracturaSemestralVal > 0) {
                        Torta.setValue("Fractura", fracturaSemestralVal);
                    }
                    if (quemaduraSemestralVal > 0) {
                        Torta.setValue("Quemadura", quemaduraSemestralVal);
                    }
                    if (muscularSemestralVal > 0) {
                        Torta.setValue("Muscular", muscularSemestralVal);
                    }
                    if (mareosSemestralVal > 0) {
                        Torta.setValue("Mareos", mareosSemestralVal);
                    }
                    if (irritacionSemestralVal > 0) {
                        Torta.setValue("Irritación", irritacionSemestralVal);
                    }

                    GraficaTorta = ChartFactory.createPieChart("Porcentaje total de patologías del área " + area + " " + semestre + " 2015",
                            Torta, false, true, false);
                } else {
                    Utils.showMessageInfo("No existen registros para los filtros seleccionados.", "Sin registros");
                    GraficaTorta = ChartFactory.createPieChart("Porcentaje total de patologías del área " + area + " " + semestre + " 2015",
                            Torta, false, true, false);
                }
            } else if (rdTortaSector.isSelected()) {
                String variable = "sector";
                String sector = (String) this.boxTortaSector.getSelectedItem();

                Integer corteSemestralVal2 = per.countAtencionesPeriodicasVariable(corte, semestre, where, variable, sector);
                Integer punzanteSemestralVal2 = per.countAtencionesPeriodicasVariable(punzante, semestre, where, variable, sector);
                Integer colgajoSemestralVal2 = per.countAtencionesPeriodicasVariable(colgajo, semestre, where, variable, sector);
                Integer abrasionSemestralVal2 = per.countAtencionesPeriodicasVariable(abrasion, semestre, where, variable, sector);
                Integer contusionSemestralVal2 = per.countAtencionesPeriodicasVariable(contusion, semestre, where, variable, sector);
                Integer fracturaSemestralVal2 = per.countAtencionesPeriodicasVariable(fractura, semestre, where, variable, sector);
                Integer quemaduraSemestralVal2 = per.countAtencionesPeriodicasVariable(quemadura, semestre, where, variable, sector);
                Integer muscularSemestralVal2 = per.countAtencionesPeriodicasVariable(muscular, semestre, where, variable, sector);
                Integer mareosSemestralVal2 = per.countAtencionesPeriodicasVariable(mareos, semestre, where, variable, sector);
                Integer irritacionSemestralVal2 = per.countAtencionesPeriodicasVariable(irritacion, semestre, where, variable, sector);
                Integer sumaSemestralVal2 = corteSemestralVal2 + punzanteSemestralVal2 + colgajoSemestralVal2 + abrasionSemestralVal2 + contusionSemestralVal2 + fracturaSemestralVal2 + quemaduraSemestralVal2 + muscularSemestralVal2 + mareosSemestralVal2 + irritacionSemestralVal2;

                if (sumaSemestralVal2 > 0) {
                    if (corteSemestralVal2 > 0) {
                        Torta.setValue("Corte", corteSemestralVal2);
                    }
                    if (punzanteSemestralVal2 > 0) {
                        Torta.setValue("Herida Punzante", punzanteSemestralVal2);
                    }
                    if (colgajoSemestralVal2 > 0) {
                        Torta.setValue("Herida Colgajo", colgajoSemestralVal2);
                    }
                    if (abrasionSemestralVal2 > 0) {
                        Torta.setValue("Herida Abrasión", abrasionSemestralVal2);
                    }
                    if (contusionSemestralVal2 > 0) {
                        Torta.setValue("Contusión", contusionSemestralVal2);
                    }
                    if (fracturaSemestralVal2 > 0) {
                        Torta.setValue("Fractura", fracturaSemestralVal2);
                    }
                    if (quemaduraSemestralVal2 > 0) {
                        Torta.setValue("Quemadura", quemaduraSemestralVal2);
                    }
                    if (muscularSemestralVal2 > 0) {
                        Torta.setValue("Muscular", muscularSemestralVal2);
                    }
                    if (mareosSemestralVal2 > 0) {
                        Torta.setValue("Mareos", mareosSemestralVal2);
                    }
                    if (irritacionSemestralVal2 > 0) {
                        Torta.setValue("Irritación", irritacionSemestralVal2);
                    }

                    GraficaTorta = ChartFactory.createPieChart("Porcentaje total de patologías del sector " + sector + " " + semestre + " 2015",
                            Torta, false, true, false);
                } else {
                    Utils.showMessageInfo("No existen registros para los filtros seleccionados.", "Sin registros");
                    GraficaTorta = ChartFactory.createPieChart("Porcentaje total de patologías del sector " + sector + " " + semestre + " 2015",
                            Torta, false, true, false);
                }
            }

        } else if (rdTortaTrimestral.isSelected()) {

            if (!rdTortaArea.isSelected() && !rdTortaSector.isSelected()) {
                String where = "trimestre";
                Integer corteTrimestral = per.countAtencionesPeriodicas(corte, trimestre, where);
                Integer punzanteTrimestral = per.countAtencionesPeriodicas(punzante, trimestre, where);
                Integer colgajoTrimestral = per.countAtencionesPeriodicas(colgajo, trimestre, where);
                Integer abrasionTrimestral = per.countAtencionesPeriodicas(abrasion, trimestre, where);
                Integer contusionTrimestral = per.countAtencionesPeriodicas(contusion, trimestre, where);
                Integer fracturaTrimestral = per.countAtencionesPeriodicas(fractura, trimestre, where);
                Integer quemaduraTrimestral = per.countAtencionesPeriodicas(quemadura, trimestre, where);
                Integer muscularTrimestral = per.countAtencionesPeriodicas(muscular, trimestre, where);
                Integer mareosTrimestral = per.countAtencionesPeriodicas(mareos, trimestre, where);
                Integer irritacionTrimestral = per.countAtencionesPeriodicas(irritacion, trimestre, where);
                Integer sumaTrimestral = corteTrimestral + punzanteTrimestral + colgajoTrimestral + abrasionTrimestral + contusionTrimestral + fracturaTrimestral + quemaduraTrimestral + muscularTrimestral + mareosTrimestral + irritacionTrimestral;

                if (sumaTrimestral > 0) {
                    if (corteTrimestral > 0) {
                        Torta.setValue("Corte", corteTrimestral);
                    }
                    if (punzanteTrimestral > 0) {
                        Torta.setValue("Herida Punzante", punzanteTrimestral);
                    }
                    if (colgajoTrimestral > 0) {
                        Torta.setValue("Herida Colgajo", colgajoTrimestral);
                    }
                    if (abrasionTrimestral > 0) {
                        Torta.setValue("Herida Abrasión", abrasionTrimestral);
                    }
                    if (contusionTrimestral > 0) {
                        Torta.setValue("Contusión", contusionTrimestral);
                    }
                    if (fracturaTrimestral > 0) {
                        Torta.setValue("Fractura", fracturaTrimestral);
                    }
                    if (quemaduraTrimestral > 0) {
                        Torta.setValue("Quemadura", quemaduraTrimestral);
                    }
                    if (muscularTrimestral > 0) {
                        Torta.setValue("Muscular", muscularTrimestral);
                    }
                    if (mareosTrimestral > 0) {
                        Torta.setValue("Mareos", mareosTrimestral);
                    }
                    if (irritacionTrimestral > 0) {
                        Torta.setValue("Irritación", irritacionTrimestral);
                    }

                    GraficaTorta = ChartFactory.createPieChart("Porcentaje total de patologías " + trimestre + " 2015",
                            Torta, false, true, false);
                } else {
                    Utils.showMessageInfo("No existen registros para los filtros seleccionados.", "Sin registros");
                    GraficaTorta = ChartFactory.createPieChart("Porcentaje total de patologías " + trimestre + " 2015",
                            Torta, false, true, false);
                }
            } else if (rdTortaArea.isSelected()) {
                String where = "trimestre";
                String variable = "area";
                String area = (String) this.boxTortaArea.getSelectedItem();

                Integer corteTrimestralVal = per.countAtencionesPeriodicasVariable(corte, trimestre, where, variable, area);
                Integer punzanteTrimestralVal = per.countAtencionesPeriodicasVariable(punzante, trimestre, where, variable, area);
                Integer colgajoTrimestralVal = per.countAtencionesPeriodicasVariable(colgajo, trimestre, where, variable, area);
                Integer abrasionTrimestralVal = per.countAtencionesPeriodicasVariable(abrasion, trimestre, where, variable, area);
                Integer contusionTrimestralVal = per.countAtencionesPeriodicasVariable(contusion, trimestre, where, variable, area);
                Integer fracturaTrimestralVal = per.countAtencionesPeriodicasVariable(fractura, trimestre, where, variable, area);
                Integer quemaduraTrimestralVal = per.countAtencionesPeriodicasVariable(quemadura, trimestre, where, variable, area);
                Integer muscularTrimestralVal = per.countAtencionesPeriodicasVariable(muscular, trimestre, where, variable, area);
                Integer mareosTrimestralVal = per.countAtencionesPeriodicasVariable(mareos, trimestre, where, variable, area);
                Integer irritacionTrimestralVal = per.countAtencionesPeriodicasVariable(irritacion, trimestre, where, variable, area);
                Integer sumaTrimestralVal = corteTrimestralVal + punzanteTrimestralVal + colgajoTrimestralVal + abrasionTrimestralVal + contusionTrimestralVal + fracturaTrimestralVal + quemaduraTrimestralVal + muscularTrimestralVal + mareosTrimestralVal + irritacionTrimestralVal;

                if (sumaTrimestralVal > 0) {
                    if (corteTrimestralVal > 0) {
                        Torta.setValue("Corte", corteTrimestralVal);
                    }
                    if (punzanteTrimestralVal > 0) {
                        Torta.setValue("Herida Punzante", punzanteTrimestralVal);
                    }
                    if (colgajoTrimestralVal > 0) {
                        Torta.setValue("Herida Colgajo", colgajoTrimestralVal);
                    }
                    if (abrasionTrimestralVal > 0) {
                        Torta.setValue("Herida Abrasión", abrasionTrimestralVal);
                    }
                    if (contusionTrimestralVal > 0) {
                        Torta.setValue("Contusión", contusionTrimestralVal);
                    }
                    if (fracturaTrimestralVal > 0) {
                        Torta.setValue("Fractura", fracturaTrimestralVal);
                    }
                    if (quemaduraTrimestralVal > 0) {
                        Torta.setValue("Quemadura", quemaduraTrimestralVal);
                    }
                    if (muscularTrimestralVal > 0) {
                        Torta.setValue("Muscular", muscularTrimestralVal);
                    }
                    if (mareosTrimestralVal > 0) {
                        Torta.setValue("Mareos", mareosTrimestralVal);
                    }
                    if (irritacionTrimestralVal > 0) {
                        Torta.setValue("Irritación", irritacionTrimestralVal);
                    }

                    GraficaTorta = ChartFactory.createPieChart("Porcentaje total de patologías del área " + area + " " + trimestre + " 2015",
                            Torta, false, true, false);
                } else {
                    Utils.showMessageInfo("No existen registros para los filtros seleccionados.", "Sin registros");
                    GraficaTorta = ChartFactory.createPieChart("Porcentaje total de patologías del área " + area + " " + trimestre + " 2015",
                            Torta, false, true, false);
                }
            } else if (rdTortaSector.isSelected()) {
                String where = "trimestre";
                String variable = "sector";
                String sector = (String) this.boxTortaSector.getSelectedItem();

                Integer corteTrimestralVal2 = per.countAtencionesPeriodicasVariable(corte, trimestre, where, variable, sector);
                Integer punzanteTrimestralVal2 = per.countAtencionesPeriodicasVariable(punzante, trimestre, where, variable, sector);
                Integer colgajoTrimestralVal2 = per.countAtencionesPeriodicasVariable(colgajo, trimestre, where, variable, sector);
                Integer abrasionTrimestralVal2 = per.countAtencionesPeriodicasVariable(abrasion, trimestre, where, variable, sector);
                Integer contusionTrimestralVal2 = per.countAtencionesPeriodicasVariable(contusion, trimestre, where, variable, sector);
                Integer fracturaTrimestralVal2 = per.countAtencionesPeriodicasVariable(fractura, trimestre, where, variable, sector);
                Integer quemaduraTrimestralVal2 = per.countAtencionesPeriodicasVariable(quemadura, trimestre, where, variable, sector);
                Integer muscularTrimestralVal2 = per.countAtencionesPeriodicasVariable(muscular, trimestre, where, variable, sector);
                Integer mareosTrimestralVal2 = per.countAtencionesPeriodicasVariable(mareos, trimestre, where, variable, sector);
                Integer irritacionTrimestralVal2 = per.countAtencionesPeriodicasVariable(irritacion, trimestre, where, variable, sector);
                Integer sumaTrimestralVal2 = corteTrimestralVal2 + punzanteTrimestralVal2 + colgajoTrimestralVal2 + abrasionTrimestralVal2 + contusionTrimestralVal2 + fracturaTrimestralVal2 + quemaduraTrimestralVal2 + muscularTrimestralVal2 + mareosTrimestralVal2 + irritacionTrimestralVal2;

                if (sumaTrimestralVal2 > 0) {
                    if (corteTrimestralVal2 > 0) {
                        Torta.setValue("Corte", corteTrimestralVal2);
                    }
                    if (punzanteTrimestralVal2 > 0) {
                        Torta.setValue("Herida Punzante", punzanteTrimestralVal2);
                    }
                    if (colgajoTrimestralVal2 > 0) {
                        Torta.setValue("Herida Colgajo", colgajoTrimestralVal2);
                    }
                    if (abrasionTrimestralVal2 > 0) {
                        Torta.setValue("Herida Abrasión", abrasionTrimestralVal2);
                    }
                    if (contusionTrimestralVal2 > 0) {
                        Torta.setValue("Contusión", contusionTrimestralVal2);
                    }
                    if (fracturaTrimestralVal2 > 0) {
                        Torta.setValue("Fractura", fracturaTrimestralVal2);
                    }
                    if (quemaduraTrimestralVal2 > 0) {
                        Torta.setValue("Quemadura", quemaduraTrimestralVal2);
                    }
                    if (muscularTrimestralVal2 > 0) {
                        Torta.setValue("Muscular", muscularTrimestralVal2);
                    }
                    if (mareosTrimestralVal2 > 0) {
                        Torta.setValue("Mareos", mareosTrimestralVal2);
                    }
                    if (irritacionTrimestralVal2 > 0) {
                        Torta.setValue("Irritación", irritacionTrimestralVal2);
                    }

                    GraficaTorta = ChartFactory.createPieChart("Porcentaje total de patologías del sector " + sector + " " + trimestre + " 2015",
                            Torta, false, true, false);
                } else {
                    Utils.showMessageInfo("No existen registros para los filtros seleccionados.", "Sin registros");
                    GraficaTorta = ChartFactory.createPieChart("Porcentaje total de patologías del sector " + sector + " " + trimestre + " 2015",
                            Torta, false, true, false);
                }
            }
        } else {
            Utils.showMessageWarning("Se deben seleccionar los filtros para mostrar graficos", "Seleccione un filtro. ");
        }
            GraficaTorta.setBackgroundPaint(new Color(222, 222, 255));
            final PiePlot plot = (PiePlot) GraficaTorta.getPlot();
            plot.setLabelFont(new Font("Courier New", Font.BOLD, 15));
            plot.setBackgroundPaint(Color.white);
            plot.setLabelLinkPaint(Color.YELLOW);
            plot.setLabelLinkStroke(new BasicStroke(2.0f));
            plot.setLabelOutlineStroke(null);
            plot.setLabelPaint(Color.BLACK);
            plot.setLabelBackgroundPaint(Color.WHITE);
            //plot.setLabelGenerator(null);

            PieSectionLabelGenerator gen = new StandardPieSectionLabelGenerator(
                    "{0}: {1} ({2})", new DecimalFormat("0"), new DecimalFormat("0.0%"));
            plot.setLabelGenerator(gen);

            ChartPanel panelTorta = new ChartPanel(GraficaTorta);
            panelGraficoTorta.setLayout(new java.awt.BorderLayout());
            panelGraficoTorta.add(panelTorta);
            panelGraficoTorta.validate();
    }//GEN-LAST:event_btnGraficarTortaActionPerformed

    private void btnGraficarAnualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGraficarAnualActionPerformed
        // TODO add your handling code here:
        AExtremidad.clear();
        AArea.clear();
        ASector.clear();
        ATipo.clear();
        ALesion.clear();
        String año = (String) this.boxAnual.getSelectedItem();
        String extremidad = "extremidad";
        String tipo = "incidente";
        String area = "area";
        String sector = "sector";
        String lesion = "lesion";

        if (rdExtremidad2.isSelected()) {
            panelGraficoAnual.removeAll();
            Integer man = DatosGraficos.DatosGraficosAñoActual("Manos", año, extremidad);
            Integer cab = DatosGraficos.DatosGraficosAñoActual("Cabeza", año, extremidad);
            Integer cue = DatosGraficos.DatosGraficosAñoActual("Cuello", año, extremidad);
            Integer bra = DatosGraficos.DatosGraficosAñoActual("Brazos", año, extremidad);
            Integer tro = DatosGraficos.DatosGraficosAñoActual("Tronco", año, extremidad);
            Integer abd = DatosGraficos.DatosGraficosAñoActual("Abdomen", año, extremidad);
            Integer pi = DatosGraficos.DatosGraficosAñoActual("Piernas", año, extremidad);
            Integer pie = DatosGraficos.DatosGraficosAñoActual("Pies", año, extremidad);
            Integer cad = DatosGraficos.DatosGraficosAñoActual("Cadera", año, extremidad);
            Integer hom = DatosGraficos.DatosGraficosAñoActual("Hombros", año, extremidad);

            Integer man2 = DatosGraficos.DatosGraficosAñoAnterior("Manos", año, extremidad);
            Integer cab2 = DatosGraficos.DatosGraficosAñoAnterior("Cabeza", año, extremidad);
            Integer cue2 = DatosGraficos.DatosGraficosAñoAnterior("Cuello", año, extremidad);
            Integer bra2 = DatosGraficos.DatosGraficosAñoAnterior("Brazos", año, extremidad);
            Integer tro2 = DatosGraficos.DatosGraficosAñoAnterior("Tronco", año, extremidad);
            Integer abd2 = DatosGraficos.DatosGraficosAñoAnterior("Abdomen", año, extremidad);
            Integer pi2 = DatosGraficos.DatosGraficosAñoAnterior("Piernas", año, extremidad);
            Integer pie2 = DatosGraficos.DatosGraficosAñoAnterior("Pies", año, extremidad);
            Integer cad2 = DatosGraficos.DatosGraficosAñoAnterior("Cadera", año, extremidad);
            Integer hom2 = DatosGraficos.DatosGraficosAñoAnterior("Hombros", año, extremidad);

            //Configuracion del gráfico        
            AExtremidad.addValue(man, "año Seleccionado", "Manos");
            AExtremidad.addValue(cab, "año Seleccionado", "Cabeza");
            AExtremidad.addValue(cue, "año Seleccionado", "Cuello");
            AExtremidad.addValue(bra, "año Seleccionado", "Brazos");
            AExtremidad.addValue(tro, "año Seleccionado", "Tronco");
            AExtremidad.addValue(abd, "año Seleccionado", "Abdomen.");
            AExtremidad.addValue(pi, "año Seleccionado", "Piernas");
            AExtremidad.addValue(pie, "año Seleccionado", "Pies");
            AExtremidad.addValue(cad, "año Seleccionado", "Cadera");
            AExtremidad.addValue(hom, "año Seleccionado", "Hombros");

            AExtremidad.addValue(man2, "año Anterior", "Manos");
            AExtremidad.addValue(cab2, "año Anterior", "Cabeza");
            AExtremidad.addValue(cue2, "año Anterior", "Cuello");
            AExtremidad.addValue(bra2, "año Anterior", "Brazos");
            AExtremidad.addValue(tro2, "año Anterior", "Tronco");
            AExtremidad.addValue(abd2, "año Anterior", "Abdomen");
            AExtremidad.addValue(pi2, "año Anterior", "Piernas");
            AExtremidad.addValue(pie2, "año Anterior", "Pies");
            AExtremidad.addValue(cad2, "año Anterior", "Cadera");
            AExtremidad.addValue(hom2, "año Anterior", "Hombros");

            GraficaAnual = ChartFactory.createBarChart3D("Incidencias Anuales por Extremidad",
                    "Extremidades", "Cantidad Incidentes", AExtremidad, PlotOrientation.VERTICAL, true, true, false);
        } else if (rdSector2.isSelected()) {
            panelGraficoAnual.removeAll();
            Integer cor = DatosGraficos.DatosGraficosAñoActual("Corte", año, sector);
            Integer lam = DatosGraficos.DatosGraficosAñoActual("Laminado", año, sector);
            Integer hor = DatosGraficos.DatosGraficosAñoActual("Horno", año, sector);
            Integer bot = DatosGraficos.DatosGraficosAñoActual("Bottero", año, sector);
            Integer ser = DatosGraficos.DatosGraficosAñoActual("Serigrafia", año, sector);
            Integer hort = DatosGraficos.DatosGraficosAñoActual("Horno Templado", año, sector);
            Integer sal = DatosGraficos.DatosGraficosAñoActual("Sala armado", año, sector);
            Integer bio = DatosGraficos.DatosGraficosAñoActual("Bodega Bio-bio", año, sector);
            Integer log = DatosGraficos.DatosGraficosAñoActual("Logistica", año, sector);
            Integer bod = DatosGraficos.DatosGraficosAñoActual("Bodega Materiales", año, sector);
            Integer cc = DatosGraficos.DatosGraficosAñoActual("Control de Calidad", año, sector);
            Integer tale = DatosGraficos.DatosGraficosAñoActual("Taller Electrico", año, sector);
            Integer talm = DatosGraficos.DatosGraficosAñoActual("Taller Mecanico", año, sector);

            Integer cor2 = DatosGraficos.DatosGraficosAñoAnterior("Corte", año, sector);
            Integer lam2 = DatosGraficos.DatosGraficosAñoAnterior("Laminado", año, sector);
            Integer hor2 = DatosGraficos.DatosGraficosAñoAnterior("Horno", año, sector);
            Integer bot2 = DatosGraficos.DatosGraficosAñoAnterior("Bottero", año, sector);
            Integer ser2 = DatosGraficos.DatosGraficosAñoAnterior("Serigrafia", año, sector);
            Integer hort2 = DatosGraficos.DatosGraficosAñoAnterior("Horno Templado", año, sector);
            Integer sal2 = DatosGraficos.DatosGraficosAñoAnterior("Sala armado", año, sector);
            Integer bio2 = DatosGraficos.DatosGraficosAñoAnterior("Bodega Bio-bio", año, sector);
            Integer log2 = DatosGraficos.DatosGraficosAñoAnterior("Logistica", año, sector);
            Integer bod2 = DatosGraficos.DatosGraficosAñoAnterior("Bodega Materiales", año, sector);
            Integer cc2 = DatosGraficos.DatosGraficosAñoAnterior("Control de Calidad", año, sector);
            Integer tale2 = DatosGraficos.DatosGraficosAñoAnterior("Taller Electrico", año, sector);
            Integer talm2 = DatosGraficos.DatosGraficosAñoAnterior("Taller Mecanico", año, sector);

            ASector.addValue(cor, "Año Seleccionado", "Corte");
            ASector.addValue(lam, "Año Seleccionado", "Lam.");
            ASector.addValue(hor, "Año Seleccionado", "Horno");
            ASector.addValue(bot, "Año Seleccionado", "Bott.");
            ASector.addValue(ser, "Año Seleccionado", "Serig.");
            ASector.addValue(hort, "Año Seleccionado", "H.Temp.");
            ASector.addValue(sal, "Año Seleccionado", "Sala A.");
            ASector.addValue(bio, "Año Seleccionado", "BBio");
            ASector.addValue(log, "Año Seleccionado", "Logi.");
            ASector.addValue(bod, "Año Seleccionado", "Bod.M.");
            ASector.addValue(cc, "Año Seleccionado", "C.Cal.");
            ASector.addValue(tale, "Año Seleccionado", "T.Elec.");
            ASector.addValue(talm, "Año Seleccionado", "T.Mec.");

            ASector.addValue(cor2, "Año Anterior", "Corte");
            ASector.addValue(lam2, "Año Anterior", "Lam.");
            ASector.addValue(hor2, "Año Anterior", "Horno");
            ASector.addValue(bot2, "Año Anterior", "Bott.");
            ASector.addValue(ser2, "Año Anterior", "Serig.");
            ASector.addValue(hort2, "Año Anterior", "H.Temp.");
            ASector.addValue(sal2, "Año Anterior", "Sala A.");
            ASector.addValue(bio2, "Año Anterior", "BBio");
            ASector.addValue(log2, "Año Anterior", "Logi.");
            ASector.addValue(bod2, "Año Anterior", "Bod.M.");
            ASector.addValue(cc2, "Año Anterior", "C.Cal.");
            ASector.addValue(tale2, "Año Anterior", "T.Elec.");
            ASector.addValue(talm2, "Año Anterior", "T.Mec.");

            GraficaAnual = ChartFactory.createBarChart3D("Incidencias Anuales por Sector",
                    "Sectores", "Cantidad Incidentes", ASector, PlotOrientation.VERTICAL, true, true, false);
        } else if (rdArea2.isSelected()) {
            panelGraficoAnual.removeAll();
            Integer bio = DatosGraficos.DatosGraficosAñoActual("Bio-bio", año, area);
            Integer man = DatosGraficos.DatosGraficosAñoActual("Mantencion", año, area);
            Integer adm = DatosGraficos.DatosGraficosAñoActual("Administrativo", año, area);
            Integer mass = DatosGraficos.DatosGraficosAñoActual("Mass", año, area);
            Integer pro = DatosGraficos.DatosGraficosAñoActual("Produccion", año, area);

            Integer bio2 = DatosGraficos.DatosGraficosAñoAnterior("Bio-bio", año, area);
            Integer man2 = DatosGraficos.DatosGraficosAñoAnterior("Mantencion", año, area);
            Integer adm2 = DatosGraficos.DatosGraficosAñoAnterior("Administrativo", año, area);
            Integer mass2 = DatosGraficos.DatosGraficosAñoAnterior("Mass", año, area);
            Integer pro2 = DatosGraficos.DatosGraficosAñoAnterior("Produccion", año, area);

            AArea.addValue(bio, "Año Seleccionado", "Bio Bio");
            AArea.addValue(man, "Año Seleccionado", "Mantención");
            AArea.addValue(adm, "Año Seleccionado", "Administrativo");
            AArea.addValue(mass, "Año Seleccionado", "Mass");
            AArea.addValue(pro, "Año Seleccionado", "Producción");

            AArea.addValue(bio2, "Año Anterior", "Bio Bio");
            AArea.addValue(man2, "Año Anterior", "Mantención");
            AArea.addValue(adm2, "Año Anterior", "Administrativo");
            AArea.addValue(mass2, "Año Anterior", "Mass");
            AArea.addValue(pro2, "Año Anterior", "Producción");

            GraficaAnual = ChartFactory.createBarChart3D("Incidencias Anuales por Area",
                    "Areas", "Cantidad Incidentes", AArea, PlotOrientation.VERTICAL, true, true, false);
        } else if (rdTipo2.isSelected()) {
            panelGraficoAnual.removeAll();
            Integer lab = DatosGraficos.DatosGraficosAñoActual("Laboral", año, tipo);
            Integer tra = DatosGraficos.DatosGraficosAñoActual("Trayecto", año, tipo);

            Integer lab2 = DatosGraficos.DatosGraficosAñoAnterior("Laboral", año, tipo);
            Integer tra2 = DatosGraficos.DatosGraficosAñoAnterior("Trayecto", año, tipo);

            ATipo.addValue(lab, "Año Seleccionado", "Laboral");
            ATipo.addValue(tra, "Año Seleccionado", "Trayecto");

            ATipo.addValue(lab2, "Año Anterior", "Laboral");
            ATipo.addValue(tra2, "Año Anterior", "Trayecto");

            GraficaAnual = ChartFactory.createBarChart3D("Incidencias Anuales por Tipo de Incidente",
                    "Tipo de Incidentes", "Cantidad Incidentes", ATipo, PlotOrientation.VERTICAL, true, true, false);
        } else if (rdLesion2.isSelected()) {
            panelGraficoAnual.removeAll();
            Integer cor = DatosGraficos.DatosGraficosAñoActual("Corte", año, lesion);
            Integer hep = DatosGraficos.DatosGraficosAñoActual("Herida punzante", año, lesion);
            Integer hec = DatosGraficos.DatosGraficosAñoActual("Herida colgajo", año, lesion);
            Integer hea = DatosGraficos.DatosGraficosAñoActual("Herida por abrasion", año, lesion);
            Integer con = DatosGraficos.DatosGraficosAñoActual("Contusion", año, lesion);
            Integer fra = DatosGraficos.DatosGraficosAñoActual("Fractura", año, lesion);
            Integer que = DatosGraficos.DatosGraficosAñoActual("Quemadura", año, lesion);
            Integer mus = DatosGraficos.DatosGraficosAñoActual("Muscular", año, lesion);

            Integer cor2 = DatosGraficos.DatosGraficosAñoAnterior("Corte", año, lesion);
            Integer hep2 = DatosGraficos.DatosGraficosAñoAnterior("Herida punzante", año, lesion);
            Integer hec2 = DatosGraficos.DatosGraficosAñoAnterior("Herida colgajo", año, lesion);
            Integer hea2 = DatosGraficos.DatosGraficosAñoAnterior("Herida por abrasion", año, lesion);
            Integer con2 = DatosGraficos.DatosGraficosAñoAnterior("Contusion", año, lesion);
            Integer fra2 = DatosGraficos.DatosGraficosAñoAnterior("Fractura", año, lesion);
            Integer que2 = DatosGraficos.DatosGraficosAñoAnterior("Quemadura", año, lesion);
            Integer mus2 = DatosGraficos.DatosGraficosAñoAnterior("Muscular", año, lesion);

            ALesion.addValue(cor, "Año Seleccionado", "Corte");
            ALesion.addValue(hep, "Año Seleccionado", "H. Punzante");
            ALesion.addValue(hec, "Año Seleccionado", "H. Colgajo");
            ALesion.addValue(hea, "Año Seleccionado", "H. Abrasion");
            ALesion.addValue(con, "Año Seleccionado", "Contusion");
            ALesion.addValue(fra, "Año Seleccionado", "Fractura.");
            ALesion.addValue(que, "Año Seleccionado", "Quemadura");
            ALesion.addValue(mus, "Año Seleccionado", "Muscular");

            ALesion.addValue(cor2, "Año Anterior", "Corte");
            ALesion.addValue(hep2, "Año Anterior", "H. Punzante");
            ALesion.addValue(hec2, "Año Anterior", "H. Colgajo");
            ALesion.addValue(hea2, "Año Anterior", "H. Abrasion");
            ALesion.addValue(con2, "Año Anterior", "Contusion");
            ALesion.addValue(fra2, "Año Anterior", "Fractura.");
            ALesion.addValue(que2, "Año Anterior", "Quemadura");
            ALesion.addValue(mus2, "Año Anterior", "Muscular");

            GraficaAnual = ChartFactory.createBarChart3D("Incidencias Anuales por Lesion",
                    "Tipo de Lesiones", "Cantidad Incidentes", ALesion, PlotOrientation.VERTICAL, true, true, false);
        } else {
            Utils.showMessageWarning("Se deben seleccionar los filtros para mostrar graficos", "Seleccione un filtro. ");
        }

        ChartPanel panelAnual = new ChartPanel(GraficaAnual);
        panelGraficoAnual.setLayout(new java.awt.BorderLayout());
        panelGraficoAnual.add(panelAnual);
        panelGraficoAnual.validate();
    }//GEN-LAST:event_btnGraficarAnualActionPerformed

    private void btnGraficarPeriodicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGraficarPeriodicoActionPerformed
        // TODO add your handling code here:
        PExtremidad.clear();
        PArea.clear();
        PSector.clear();
        PTipo.clear();
        PLesion.clear();
        String periodo = (String) this.boxPeriodico.getSelectedItem();
        String semTrim = "";
        if (this.rdSemestre.isSelected()) {
            semTrim = "semestre";
        } else if (this.rdTrimestre.isSelected()) {
            semTrim = "trimestre";
        }

        String extremidad = "extremidad";
        String tipo = "incidente";
        String area = "area";
        String sector = "sector";
        String lesion = "lesion";

        if (rdExtremidad3.isSelected()) {
            panelGraficoPeriodico.removeAll();
            Integer man = DatosGraficos.DatosGraficosPeriodoActual("Manos", periodo, extremidad, semTrim);
            Integer cab = DatosGraficos.DatosGraficosPeriodoActual("Cabeza", periodo, extremidad, semTrim);
            Integer cue = DatosGraficos.DatosGraficosPeriodoActual("Cuello", periodo, extremidad, semTrim);
            Integer bra = DatosGraficos.DatosGraficosPeriodoActual("Brazos", periodo, extremidad, semTrim);
            Integer tro = DatosGraficos.DatosGraficosPeriodoActual("Tronco", periodo, extremidad, semTrim);
            Integer abd = DatosGraficos.DatosGraficosPeriodoActual("Abdomen", periodo, extremidad, semTrim);
            Integer pi = DatosGraficos.DatosGraficosPeriodoActual("Piernas", periodo, extremidad, semTrim);
            Integer pie = DatosGraficos.DatosGraficosPeriodoActual("Pies", periodo, extremidad, semTrim);
            Integer cad = DatosGraficos.DatosGraficosPeriodoActual("Cadera", periodo, extremidad, semTrim);
            Integer hom = DatosGraficos.DatosGraficosPeriodoActual("Hombros", periodo, extremidad, semTrim);

            Integer man2 = DatosGraficos.DatosGraficosPeriodoAnterior("Manos", periodo, extremidad, semTrim);
            Integer cab2 = DatosGraficos.DatosGraficosPeriodoAnterior("Cabeza", periodo, extremidad, semTrim);
            Integer cue2 = DatosGraficos.DatosGraficosPeriodoAnterior("Cuello", periodo, extremidad, semTrim);
            Integer bra2 = DatosGraficos.DatosGraficosPeriodoAnterior("Brazos", periodo, extremidad, semTrim);
            Integer tro2 = DatosGraficos.DatosGraficosPeriodoAnterior("Tronco", periodo, extremidad, semTrim);
            Integer abd2 = DatosGraficos.DatosGraficosPeriodoAnterior("Abdomen", periodo, extremidad, semTrim);
            Integer pi2 = DatosGraficos.DatosGraficosPeriodoAnterior("Piernas", periodo, extremidad, semTrim);
            Integer pie2 = DatosGraficos.DatosGraficosPeriodoAnterior("Pies", periodo, extremidad, semTrim);
            Integer cad2 = DatosGraficos.DatosGraficosPeriodoAnterior("Cadera", periodo, extremidad, semTrim);
            Integer hom2 = DatosGraficos.DatosGraficosPeriodoAnterior("Hombros", periodo, extremidad, semTrim);

            //Configuracion del gráfico        
            PExtremidad.addValue(man, "Periodo Seleccionado", "Manos");
            PExtremidad.addValue(cab, "Periodo Seleccionado", "Cabeza");
            PExtremidad.addValue(cue, "Periodo Seleccionado", "Cuello");
            PExtremidad.addValue(bra, "Periodo Seleccionado", "Brazos");
            PExtremidad.addValue(tro, "Periodo Seleccionado", "Tronco");
            PExtremidad.addValue(abd, "Periodo Seleccionado", "Abdomen");
            PExtremidad.addValue(pi, "Periodo Seleccionado", "Piernas");
            PExtremidad.addValue(pie, "Periodo Seleccionado", "Pies");
            PExtremidad.addValue(cad, "Periodo Seleccionado", "Cadera");
            PExtremidad.addValue(hom, "Periodo Seleccionado", "Hombros");

            PExtremidad.addValue(man2, "Periodo Anterior", "Manos");
            PExtremidad.addValue(cab2, "Periodo Anterior", "Cabeza");
            PExtremidad.addValue(cue2, "Periodo Anterior", "Cuello");
            PExtremidad.addValue(bra2, "Periodo Anterior", "Brazos");
            PExtremidad.addValue(tro2, "Periodo Anterior", "Tronco");
            PExtremidad.addValue(abd2, "Periodo Anterior", "Abdomen");
            PExtremidad.addValue(pi2, "Periodo Anterior", "Piernas");
            PExtremidad.addValue(pie2, "Periodo Anterior", "Pies");
            PExtremidad.addValue(cad2, "Periodo Seleccionado", "Cadera");
            PExtremidad.addValue(hom2, "Periodo Seleccionado", "Hombros");

            GraficaPeriodica = ChartFactory.createBarChart3D("Incidencias Periodicas por Extremidad",
                    "Extremidades", "Cantidad Incidentes", PExtremidad, PlotOrientation.VERTICAL, true, true, false);
        } else if (rdSector3.isSelected()) {
            panelGraficoPeriodico.removeAll();
            Integer cor = DatosGraficos.DatosGraficosPeriodoActual("Corte", periodo, sector, semTrim);
            Integer lam = DatosGraficos.DatosGraficosPeriodoActual("Laminado", periodo, sector, semTrim);
            Integer hor = DatosGraficos.DatosGraficosPeriodoActual("Horno", periodo, sector, semTrim);
            Integer bot = DatosGraficos.DatosGraficosPeriodoActual("Bottero", periodo, sector, semTrim);
            Integer ser = DatosGraficos.DatosGraficosPeriodoActual("Serigrafia", periodo, sector, semTrim);
            Integer hort = DatosGraficos.DatosGraficosPeriodoActual("Horno Templado", periodo, sector, semTrim);
            Integer sal = DatosGraficos.DatosGraficosPeriodoActual("Sala armado", periodo, sector, semTrim);
            Integer bio = DatosGraficos.DatosGraficosPeriodoActual("Bodega Bio-bio", periodo, sector, semTrim);
            Integer log = DatosGraficos.DatosGraficosPeriodoActual("Logistica", periodo, sector, semTrim);
            Integer bod = DatosGraficos.DatosGraficosPeriodoActual("Bodega Materiales", periodo, sector, semTrim);
            Integer cc = DatosGraficos.DatosGraficosPeriodoActual("Control de Calidad", periodo, sector, semTrim);
            Integer tale = DatosGraficos.DatosGraficosPeriodoActual("Taller Electrico", periodo, sector, semTrim);
            Integer talm = DatosGraficos.DatosGraficosPeriodoActual("Taller Mecanico", periodo, sector, semTrim);

            Integer cor2 = DatosGraficos.DatosGraficosPeriodoAnterior("Corte", periodo, sector, semTrim);
            Integer lam2 = DatosGraficos.DatosGraficosPeriodoAnterior("Laminado", periodo, sector, semTrim);
            Integer hor2 = DatosGraficos.DatosGraficosPeriodoAnterior("Horno", periodo, sector, semTrim);
            Integer bot2 = DatosGraficos.DatosGraficosPeriodoAnterior("Bottero", periodo, sector, semTrim);
            Integer ser2 = DatosGraficos.DatosGraficosPeriodoAnterior("Serigrafia", periodo, sector, semTrim);
            Integer hort2 = DatosGraficos.DatosGraficosPeriodoAnterior("Horno Templado", periodo, sector, semTrim);
            Integer sal2 = DatosGraficos.DatosGraficosPeriodoAnterior("Sala armado", periodo, sector, semTrim);
            Integer bio2 = DatosGraficos.DatosGraficosPeriodoAnterior("Bodega Bio-bio", periodo, sector, semTrim);
            Integer log2 = DatosGraficos.DatosGraficosPeriodoAnterior("Logistica", periodo, sector, semTrim);
            Integer bod2 = DatosGraficos.DatosGraficosPeriodoAnterior("Bodega Materiales", periodo, sector, semTrim);
            Integer cc2 = DatosGraficos.DatosGraficosPeriodoAnterior("Control de Calidad", periodo, sector, semTrim);
            Integer tale2 = DatosGraficos.DatosGraficosPeriodoAnterior("Taller Electrico", periodo, sector, semTrim);
            Integer talm2 = DatosGraficos.DatosGraficosPeriodoAnterior("Taller Mecanico", periodo, sector, semTrim);

            PSector.addValue(cor, "Periodo Seleccionado", "Corte");
            PSector.addValue(lam, "Periodo Seleccionado", "Lam.");
            PSector.addValue(hor, "Periodo Seleccionado", "Horno");
            PSector.addValue(bot, "Periodo Seleccionado", "Bott.");
            PSector.addValue(ser, "Periodo Seleccionado", "Serig.");
            PSector.addValue(hort, "Periodo Seleccionado", "H.Temp.");
            PSector.addValue(sal, "Periodo Seleccionado", "Sala A.");
            PSector.addValue(bio, "Periodo Seleccionado", "BBio");
            PSector.addValue(log, "Periodo Seleccionado", "Logi.");
            PSector.addValue(bod, "Periodo Seleccionado", "Bod.M.");
            PSector.addValue(cc, "Periodo Seleccionado", "C.Cal.");
            PSector.addValue(tale, "Periodo Seleccionado", "T.Elec.");
            PSector.addValue(talm, "Periodo Seleccionado", "T.Mec.");

            PSector.addValue(cor2, "Periodo Anterior", "Corte");
            PSector.addValue(lam2, "Periodo Anterior", "Lam.");
            PSector.addValue(hor2, "Periodo Anterior", "Horno");
            PSector.addValue(bot2, "Periodo Anterior", "Bott.");
            PSector.addValue(ser2, "Periodo Anterior", "Serig.");
            PSector.addValue(hort2, "Periodo Anterior", "H.Temp.");
            PSector.addValue(sal2, "Periodo Anterior", "Sala A.");
            PSector.addValue(bio2, "Periodo Anterior", "BBio");
            PSector.addValue(log2, "Periodo Anterior", "Logi.");
            PSector.addValue(bod2, "Periodo Anterior", "Bod.M.");
            PSector.addValue(cc2, "Periodo Anterior", "C.Cal.");
            PSector.addValue(tale2, "Periodo Anterior", "T.Elec.");
            PSector.addValue(talm2, "Periodo Anterior", "T.Mec.");

            GraficaPeriodica = ChartFactory.createBarChart3D("Incidencias Periodicas por Sector",
                    "Sectores", "Cantidad Incidentes", PSector, PlotOrientation.VERTICAL, true, true, false);
        } else if (rdArea3.isSelected()) {
            panelGraficoPeriodico.removeAll();
            Integer bio = DatosGraficos.DatosGraficosPeriodoActual("Bio-bio", periodo, area, semTrim);
            Integer man = DatosGraficos.DatosGraficosPeriodoActual("Mantencion", periodo, area, semTrim);
            Integer adm = DatosGraficos.DatosGraficosPeriodoActual("Administrativo", periodo, area, semTrim);
            Integer mass = DatosGraficos.DatosGraficosPeriodoActual("Mass", periodo, area, semTrim);
            Integer pro = DatosGraficos.DatosGraficosPeriodoActual("Produccion", periodo, area, semTrim);

            Integer bio2 = DatosGraficos.DatosGraficosPeriodoAnterior("Bio-bio", periodo, area, semTrim);
            Integer man2 = DatosGraficos.DatosGraficosPeriodoAnterior("Mantencion", periodo, area, semTrim);
            Integer adm2 = DatosGraficos.DatosGraficosPeriodoAnterior("Administrativo", periodo, area, semTrim);
            Integer mass2 = DatosGraficos.DatosGraficosPeriodoAnterior("Mass", periodo, area, semTrim);
            Integer pro2 = DatosGraficos.DatosGraficosPeriodoAnterior("Produccion", periodo, area, semTrim);

            PArea.addValue(bio, "Periodo Seleccionado", "Bio Bio");
            PArea.addValue(man, "Periodo Seleccionado", "Mantención");
            PArea.addValue(adm, "Periodo Seleccionado", "Administrativo");
            PArea.addValue(mass, "Periodo Seleccionado", "Mass");
            PArea.addValue(pro, "Periodo Seleccionado", "Producción");

            PArea.addValue(bio2, "Periodo Anterior", "Bio Bio");
            PArea.addValue(man2, "Periodo Anterior", "Mantención");
            PArea.addValue(adm2, "Periodo Anterior", "Administrativo");
            PArea.addValue(mass2, "Periodo Anterior", "Mass");
            PArea.addValue(pro2, "Periodo Anterior", "Producción");

            GraficaPeriodica = ChartFactory.createBarChart3D("Incidencias Periodicas por Area",
                    "Areas", "Cantidad Incidentes", PArea, PlotOrientation.VERTICAL, true, true, false);
        } else if (rdTipo3.isSelected()) {
            panelGraficoPeriodico.removeAll();
            Integer lab = DatosGraficos.DatosGraficosPeriodoActual("Laboral", periodo, tipo, semTrim);
            Integer tra = DatosGraficos.DatosGraficosPeriodoActual("Trayecto", periodo, tipo, semTrim);

            Integer lab2 = DatosGraficos.DatosGraficosPeriodoAnterior("Laboral", periodo, tipo, semTrim);
            Integer tra2 = DatosGraficos.DatosGraficosPeriodoAnterior("Trayecto", periodo, tipo, semTrim);

            PTipo.addValue(lab, "Periodo Seleccionado", "Laboral");
            PTipo.addValue(tra, "Periodo Seleccionado", "Trayecto");

            PTipo.addValue(lab2, "Periodo Anterior", "Laboral");
            PTipo.addValue(tra2, "Periodo Anterior", "Trayecto");

            GraficaPeriodica = ChartFactory.createBarChart3D("Incidencias Periodicas por Tipo de Incidente",
                    "Tipo de Incidentes", "Cantidad Incidentes", PTipo, PlotOrientation.VERTICAL, true, true, false);
        } else if (rdLesion3.isSelected()) {
            panelGraficoPeriodico.removeAll();
            Integer cor = DatosGraficos.DatosGraficosPeriodoActual("Corte", periodo, lesion, semTrim);
            Integer hep = DatosGraficos.DatosGraficosPeriodoActual("Herida punzante", periodo, lesion, semTrim);
            Integer hec = DatosGraficos.DatosGraficosPeriodoActual("Herida colgajo", periodo, lesion, semTrim);
            Integer hea = DatosGraficos.DatosGraficosPeriodoActual("Herida por abrasion", periodo, lesion, semTrim);
            Integer con = DatosGraficos.DatosGraficosPeriodoActual("Contusion", periodo, lesion, semTrim);
            Integer fra = DatosGraficos.DatosGraficosPeriodoActual("Fractura", periodo, lesion, semTrim);
            Integer que = DatosGraficos.DatosGraficosPeriodoActual("Quemadura", periodo, lesion, semTrim);
            Integer mus = DatosGraficos.DatosGraficosPeriodoActual("Muscular", periodo, lesion, semTrim);

            Integer cor2 = DatosGraficos.DatosGraficosPeriodoAnterior("Corte", periodo, lesion, semTrim);
            Integer hep2 = DatosGraficos.DatosGraficosPeriodoAnterior("Herida punzante", periodo, lesion, semTrim);
            Integer hec2 = DatosGraficos.DatosGraficosPeriodoAnterior("Herida colgajo", periodo, lesion, semTrim);
            Integer hea2 = DatosGraficos.DatosGraficosPeriodoAnterior("Herida por abrasion", periodo, lesion, semTrim);
            Integer con2 = DatosGraficos.DatosGraficosPeriodoAnterior("Contusion", periodo, lesion, semTrim);
            Integer fra2 = DatosGraficos.DatosGraficosPeriodoAnterior("Fractura", periodo, lesion, semTrim);
            Integer que2 = DatosGraficos.DatosGraficosPeriodoAnterior("Quemadura", periodo, lesion, semTrim);
            Integer mus2 = DatosGraficos.DatosGraficosPeriodoAnterior("Muscular", periodo, lesion, semTrim);

            PLesion.addValue(cor, "Periodo Seleccionado", "Corte");
            PLesion.addValue(hep, "Periodo Seleccionado", "H. Punzante");
            PLesion.addValue(hec, "Periodo Seleccionado", "H. Colgajo");
            PLesion.addValue(hea, "Periodo Seleccionado", "H. Abrasion");
            PLesion.addValue(con, "Periodo Seleccionado", "Contusion");
            PLesion.addValue(fra, "Periodo Seleccionado", "Fractura.");
            PLesion.addValue(que, "Periodo Seleccionado", "Quemadura");
            PLesion.addValue(mus, "Periodo Seleccionado", "Muscular");

            PLesion.addValue(cor2, "Periodo Anterior", "Corte");
            PLesion.addValue(hep2, "Periodo Anterior", "H. Punzante");
            PLesion.addValue(hec2, "Periodo Anterior", "H. Colgajo");
            PLesion.addValue(hea2, "Periodo Anterior", "H. Abrasion");
            PLesion.addValue(con2, "Periodo Anterior", "Contusion");
            PLesion.addValue(fra2, "Periodo Anterior", "Fractura.");
            PLesion.addValue(que2, "Periodo Anterior", "Quemadura");
            PLesion.addValue(mus2, "Periodo Anterior", "Muscular");

            GraficaPeriodica = ChartFactory.createBarChart3D("Incidencias Periodicas por Lesion",
                    "Tipo de Lesiones", "Cantidad Incidentes", PLesion, PlotOrientation.VERTICAL, true, true, false);
        } else {
            Utils.showMessageWarning("Se deben seleccionar los filtros para mostrar graficos", "Seleccione un filtro. ");
        }
        ChartPanel panelPeriodico = new ChartPanel(GraficaPeriodica);
        panelGraficoPeriodico.setLayout(new java.awt.BorderLayout());
        panelGraficoPeriodico.add(panelPeriodico);
        panelGraficoPeriodico.validate();
    }//GEN-LAST:event_btnGraficarPeriodicoActionPerformed

    private void rdSemestreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdSemestreMouseClicked
        // TODO add your handling code here:
        this.boxPeriodico.removeAllItems();
        QuerysPeriodicas query = new QuerysPeriodicas();
        ResultSet rs1;
        rs1 = query.ExtraerSemestreMsg();
        try {
            while (rs1.next()) {
                this.boxPeriodico.addItem(rs1.getString("semestre_msg"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_rdSemestreMouseClicked

    private void rdTrimestreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdTrimestreMouseClicked
        // TODO add your handling code here:
        this.boxPeriodico.removeAllItems();
        QuerysPeriodicas query = new QuerysPeriodicas();
        ResultSet rs2;
        rs2 = query.ExtraerTrimestreMsg();
        try {
            while (rs2.next()) {
                this.boxPeriodico.addItem(rs2.getString("trimestre_msg"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_rdTrimestreMouseClicked

    private void btnGuardaTortaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardaTortaActionPerformed
        // TODO add your handling code here:
        try {
            ChartUtilities.saveChartAsJPEG(new File("D:\\Graficos\\Grafico torta.jpg"), GraficaTorta, 1024, 768);
            Utils.showMessageInfo("Imagen guardada correctamente.", "Guardada");
            gestion.verificaDirectorio();
        } catch (IOException ex) {
            Logger.getLogger(MassGraficos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGuardaTortaActionPerformed

    private void btnGuardarPeriodicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarPeriodicoActionPerformed
        // TODO add your handling code here:
        try {
            ChartUtilities.saveChartAsJPEG(new File("D:\\Graficos\\Grafico Periodico.jpg"), GraficaPeriodica, 1024, 768);
            Utils.showMessageInfo("Imagen guardada correctamente.", "Guardada");
            gestion.verificaDirectorio();
        } catch (IOException ex) {
            Logger.getLogger(MassGraficos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGuardarPeriodicoActionPerformed

    private void btnGuardarAnualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarAnualActionPerformed
        // TODO add your handling code here:
        try {
            ChartUtilities.saveChartAsJPEG(new File("D:\\Graficos\\Grafico Anual.jpg"), GraficaAnual, 1024, 768);
            Utils.showMessageInfo("Imagen guardada correctamente.", "Guardada");
            gestion.verificaDirectorio();
        } catch (IOException ex) {
            Logger.getLogger(MassGraficos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGuardarAnualActionPerformed

    private void btnGuardarMensualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarMensualActionPerformed
        // TODO add your handling code here:
        try {
            ChartUtilities.saveChartAsJPEG(new File("D:\\Graficos\\Grafico Mensual.jpg"), GraficaMensual, 1024, 768);
            Utils.showMessageInfo("Imagen guardada correctamente.", "Guardada");
            gestion.verificaDirectorio();
        } catch (IOException ex) {
            Logger.getLogger(MassGraficos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGuardarMensualActionPerformed

    private void rdTortaSemestralMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdTortaSemestralMouseClicked
        // TODO add your handling code here:
        this.boxTortaTiempo.removeAllItems();
        QuerysPeriodicas query = new QuerysPeriodicas();
        ResultSet rs;
        rs = query.ExtraerSemestreMsg();
        try {
            while (rs.next()) {
                this.boxTortaTiempo.addItem(rs.getString("semestre_msg"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_rdTortaSemestralMouseClicked

    private void rdTortaTrimestralMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdTortaTrimestralMouseClicked
        // TODO add your handling code here:
        this.boxTortaTiempo.removeAllItems();
        QuerysPeriodicas query = new QuerysPeriodicas();
        ResultSet rs;
        rs = query.ExtraerTrimestreMsg();
        try {
            while (rs.next()) {
                this.boxTortaTiempo.addItem(rs.getString("trimestre_msg"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_rdTortaTrimestralMouseClicked

    private void rdTortaAnualMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdTortaAnualMouseClicked
        // TODO add your handling code here:
        this.boxTortaTiempo.removeAllItems();
        this.boxTortaTiempo.addItem("2014");
        this.boxTortaTiempo.addItem("2015");
    }//GEN-LAST:event_rdTortaAnualMouseClicked

    private void rdTortaSectorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdTortaSectorMouseClicked
        // TODO add your handling code here:
        this.boxTortaSector.removeAllItems();
        this.boxTortaArea.removeAllItems();
        Conexion cn = new Conexion();
        ResultSet rs;
        rs = cn.ExtraerSector();
        try {
            while (rs.next()) {
                this.boxTortaSector.addItem(rs.getString("nombre_sector"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_rdTortaSectorMouseClicked

    private void rdTortaAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdTortaAreaMouseClicked
        // TODO add your handling code here:
        this.boxTortaArea.removeAllItems();
        this.boxTortaSector.removeAllItems();
        Conexion cn = new Conexion();
        ResultSet rs;
        rs = cn.ExtraerArea();
        try {
            while (rs.next()) {
                this.boxTortaArea.addItem(rs.getString("nombre_area"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_rdTortaAreaMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox boxAnual;
    private javax.swing.JComboBox boxMes;
    private javax.swing.JComboBox boxPeriodico;
    private javax.swing.JComboBox boxTortaArea;
    private javax.swing.JComboBox boxTortaSector;
    private javax.swing.JComboBox boxTortaTiempo;
    private javax.swing.JButton btnGraficarAnual;
    private javax.swing.JButton btnGraficarMensual;
    private javax.swing.JButton btnGraficarPeriodico;
    private javax.swing.JButton btnGraficarTorta;
    private javax.swing.JButton btnGuardaTorta;
    private javax.swing.JButton btnGuardarAnual;
    private javax.swing.JButton btnGuardarMensual;
    private javax.swing.JButton btnGuardarPeriodico;
    private javax.swing.ButtonGroup grupoAnual;
    private javax.swing.ButtonGroup grupoMensual;
    private javax.swing.ButtonGroup grupoPeriodico1;
    private javax.swing.ButtonGroup grupoPeriodico2;
    private javax.swing.ButtonGroup grupoTortaSectores;
    private javax.swing.ButtonGroup grupoTortaTiempo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel panelAnual;
    private javax.swing.JPanel panelFiltroAnual;
    private javax.swing.JPanel panelFiltroMensual;
    private javax.swing.JPanel panelFiltroPeriodico;
    private javax.swing.JPanel panelFiltroTorta2;
    private javax.swing.JPanel panelGraficoAnual;
    private javax.swing.JPanel panelGraficoMensual;
    private javax.swing.JPanel panelGraficoPeriodico;
    private javax.swing.JPanel panelGraficoTorta;
    private javax.swing.JPanel panelIncidenciaAnual;
    private javax.swing.JPanel panelIncidenciaMensual;
    private javax.swing.JPanel panelIncidenciaPeriodico;
    private javax.swing.JPanel panelMensual;
    private javax.swing.JPanel panelPeriodico;
    private javax.swing.JPanel panelTorta;
    private javax.swing.JPanel panelTortaFiltro1;
    private javax.swing.JRadioButton rdArea;
    private javax.swing.JRadioButton rdArea2;
    private javax.swing.JRadioButton rdArea3;
    private javax.swing.JRadioButton rdExtremidad;
    private javax.swing.JRadioButton rdExtremidad2;
    private javax.swing.JRadioButton rdExtremidad3;
    private javax.swing.JRadioButton rdLesion;
    private javax.swing.JRadioButton rdLesion2;
    private javax.swing.JRadioButton rdLesion3;
    private javax.swing.JRadioButton rdSector;
    private javax.swing.JRadioButton rdSector2;
    private javax.swing.JRadioButton rdSector3;
    private javax.swing.JRadioButton rdSemestre;
    private javax.swing.JRadioButton rdTipo;
    private javax.swing.JRadioButton rdTipo2;
    private javax.swing.JRadioButton rdTipo3;
    private javax.swing.JRadioButton rdTortaAnual;
    private javax.swing.JRadioButton rdTortaArea;
    private javax.swing.JRadioButton rdTortaSector;
    private javax.swing.JRadioButton rdTortaSemestral;
    private javax.swing.JRadioButton rdTortaTrimestral;
    private javax.swing.JRadioButton rdTrimestre;
    // End of variables declaration//GEN-END:variables
}
