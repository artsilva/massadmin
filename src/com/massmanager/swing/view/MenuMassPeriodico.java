/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.massmanager.swing.view;

import com.massmanager.swing.model.PropiedadesColumnas;
import com.massmanager.swing.model.QuerysPeriodicas;
import com.massmanager.swing.model.Conexion;
import com.massmanager.swing.model.Utils;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Rectangle;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JProgressBar;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Artsk
 */
public class MenuMassPeriodico extends javax.swing.JInternalFrame {

    JTable grid;
    ResultSet rs;
    JProgressBar barraProgreso;
    JFileChooser seleccionado = new JFileChooser();
    File archivo;

    /**
     * Creates new form MenuMassPeriodico
     */
    public MenuMassPeriodico() {
        initComponents();
        
        this.boxSemana.setVisible(false);

        grdPeriodico.setAutoResizeMode(grdPeriodico.AUTO_RESIZE_OFF);
        grdPeriodico.doLayout();

        //Configuracion grupoPrimario RadioButton
        grupoPrimero.add(rdArea);
        grupoPrimero.add(rdExtremidad);
        grupoPrimero.add(rdSector);
        grupoPrimero.add(rdTipo);

        grupoSegundo.add(rdSemestral);
        grupoSegundo.add(rdTrimestral);

        progressPeriodico.setForeground(new Color(79, 160, 240));
        progressPeriodico.setBackground(new Color(255,255,255));
        UIManager.put("ScrollBar.background", (new Color(255, 255, 255)));
        
        DefaultTableModel dfm = new DefaultTableModel();
        grid = this.grdPeriodico;
        grid.setModel(dfm);

        dfm.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Apellido", "Rut", "Sector", "Area", "Jefe Area", "Fecha", "Sem. del AÃ±o", "Sem. del Mes", "Trimestre",
            "Semestre", "Lugar", "Detalles", "Lesion", "Incidente", "Extremidad", "Paramedico", "Tratamiento", "Comentario"});

        QuerysPeriodicas query = new QuerysPeriodicas();
        String nombre = "";
        String apellido = "";
        int cont = 0;
        rs = query.ExtraerAtencionesPeriodico();
        try {
            while (rs.next()) {
                nombre = Utils.convertToMayus(rs.getString("nombre"));
                apellido = Utils.convertToMayus(rs.getString("apellido"));
                cont++;
                dfm.addRow(new Object[]{cont, nombre, apellido, rs.getInt("rut"),
                    rs.getString("sector"), rs.getString("area"), rs.getString("jefe_area"), rs.getString("fecha"), rs.getString("periodo_del_anio"),
                    rs.getString("periodo_del_mes"), rs.getString("trimestre"), rs.getString("semestre"), rs.getString("lugarincidente"),
                    rs.getString("detalles"), rs.getString("lesion"), rs.getString("incidente"), rs.getString("extremidad"),
                    rs.getString("paramedico"), rs.getString("tratamiento"), rs.getString("comentario")});
            }
        } catch (Exception e) {
            e.printStackTrace();
        }        
        //Setea el ancho de las columnas con valores del Metodo de la Clase AnchoColumnas
        PropiedadesColumnas columna = new PropiedadesColumnas();
        columna.setAnchoColumnasPeriodicoDefault(grdPeriodico);
        columna.setPropiedadesCabeceras(grdPeriodico);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoPrimero = new javax.swing.ButtonGroup();
        grupoSegundo = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        grdPeriodico = new javax.swing.JTable();
        progressPeriodico = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        panelTipo = new javax.swing.JPanel();
        boxOpcion = new javax.swing.JComboBox();
        btnFiltrar = new javax.swing.JButton();
        btnExportar = new javax.swing.JButton();
        boxSemana = new javax.swing.JComboBox();
        chkSemana = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        rdTipo = new javax.swing.JRadioButton();
        rdArea = new javax.swing.JRadioButton();
        rdSector = new javax.swing.JRadioButton();
        rdExtremidad = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        rdSemestral = new javax.swing.JRadioButton();
        rdTrimestral = new javax.swing.JRadioButton();
        boxSemTrim = new javax.swing.JComboBox();

        setBackground(new java.awt.Color(255, 255, 255));
        setTitle("Reportes Periodicos");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(1180, 662));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1180, 662));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "Atenciones Periodos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP)));
        jPanel2.setPreferredSize(new java.awt.Dimension(1140, 465));

        grdPeriodico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        grdPeriodico.setGridColor(new java.awt.Color(154, 201, 247));
        grdPeriodico.setRowSelectionAllowed(false);
        grdPeriodico.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(grdPeriodico);
        if (grdPeriodico.getColumnModel().getColumnCount() > 0) {
            grdPeriodico.getColumnModel().getColumn(0).setResizable(false);
            grdPeriodico.getColumnModel().getColumn(1).setResizable(false);
            grdPeriodico.getColumnModel().getColumn(2).setResizable(false);
            grdPeriodico.getColumnModel().getColumn(3).setResizable(false);
        }

        progressPeriodico.setForeground(new java.awt.Color(102, 255, 102));
        progressPeriodico.setPreferredSize(new java.awt.Dimension(146, 16));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1107, Short.MAX_VALUE)
                    .addComponent(progressPeriodico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressPeriodico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/massmanager/swing/view/lirquen-logo-top.png"))); // NOI18N

        panelTipo.setBackground(new java.awt.Color(255, 255, 255));
        panelTipo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filtro Secundario", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP)));
        panelTipo.setPreferredSize(new java.awt.Dimension(340, 129));

        boxOpcion.setEditable(true);
        boxOpcion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        btnFiltrar.setText("Filtrar");
        btnFiltrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarActionPerformed(evt);
            }
        });

        btnExportar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/massmanager/swing/view/Images/file-excel.png"))); // NOI18N
        btnExportar.setText("Exportar");
        btnExportar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        boxSemana.setEditable(true);

        chkSemana.setBackground(new java.awt.Color(255, 255, 255));
        chkSemana.setText("NÂº Semana");
        chkSemana.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkSemanaMouseClicked(evt);
            }
        });
        chkSemana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSemanaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelTipoLayout = new javax.swing.GroupLayout(panelTipo);
        panelTipo.setLayout(panelTipoLayout);
        panelTipoLayout.setHorizontalGroup(
            panelTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTipoLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(panelTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(boxOpcion, 0, 151, Short.MAX_VALUE)
                        .addComponent(boxSemana, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(chkSemana))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(panelTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnExportar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnFiltrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        panelTipoLayout.setVerticalGroup(
            panelTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTipoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTipoLayout.createSequentialGroup()
                        .addComponent(boxOpcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkSemana)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(boxSemana, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelTipoLayout.createSequentialGroup()
                        .addComponent(btnFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExportar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filtrar por", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP), "Filtro Primario"));
        jPanel3.setPreferredSize(new java.awt.Dimension(340, 129));

        rdTipo.setBackground(new java.awt.Color(255, 255, 255));
        rdTipo.setText("Tipo");
        rdTipo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdTipo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdTipoMouseClicked(evt);
            }
        });

        rdArea.setBackground(new java.awt.Color(255, 255, 255));
        rdArea.setText("Area");
        rdArea.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdAreaMouseClicked(evt);
            }
        });

        rdSector.setBackground(new java.awt.Color(255, 255, 255));
        rdSector.setText("Sector");
        rdSector.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdSector.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdSectorMouseClicked(evt);
            }
        });

        rdExtremidad.setBackground(new java.awt.Color(255, 255, 255));
        rdExtremidad.setText("Extremidad Afectada");
        rdExtremidad.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdExtremidad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdExtremidadMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdTipo)
                    .addComponent(rdSector)
                    .addComponent(rdExtremidad)
                    .addComponent(rdArea))
                .addContainerGap(158, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(rdTipo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdArea)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdSector)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdExtremidad)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Filtro Periodos")));

        rdSemestral.setBackground(new java.awt.Color(255, 255, 255));
        rdSemestral.setText("Semestral");
        rdSemestral.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdSemestralMouseClicked(evt);
            }
        });

        rdTrimestral.setBackground(new java.awt.Color(255, 255, 255));
        rdTrimestral.setText("Trimestral");
        rdTrimestral.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdTrimestralMouseClicked(evt);
            }
        });

        boxSemTrim.setEditable(true);
        boxSemTrim.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        boxSemTrim.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                boxSemTrimItemStateChanged(evt);
            }
        });
        boxSemTrim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxSemTrimActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(boxSemTrim, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdSemestral)
                    .addComponent(rdTrimestral))
                .addContainerGap(86, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdSemestral)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rdTrimestral)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(boxSemTrim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panelTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelTipo, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarActionPerformed
        // TODO add your handling code here:

        Boolean checkSemana = false;
        if (chkSemana.isSelected()) {
            checkSemana = true;
        }

        String extremidad = (String) this.boxOpcion.getSelectedItem();
        String tipo = (String) this.boxOpcion.getSelectedItem();
        String area = (String) this.boxOpcion.getSelectedItem();
        String sector = (String) this.boxOpcion.getSelectedItem();
        String semana = (String) this.boxSemana.getSelectedItem();
        String semestre = (String) this.boxSemTrim.getSelectedItem();
        String trimestre = (String) this.boxSemTrim.getSelectedItem();
        String semTrim = "";
        String where = "";
        String nombre = "";
        String apellido = "";

        QuerysPeriodicas query = new QuerysPeriodicas();
        grdPeriodico.setModel(new DefaultTableModel());
        DefaultTableModel dfm = new DefaultTableModel();
        PropiedadesColumnas columna = new PropiedadesColumnas();
        int cont = 1;
        int countRs = 0;

        //SEMESTRAL
        //Semestrales Sin Filtro Semana
        if (rdSemestral.isSelected() && !checkSemana) {
            
            if (rdExtremidad.isSelected()) {
                countRs = 0;
                where = "extremidad";
                semTrim = "semestre";
                ResultSet rsExtr;
                rsExtr = query.ExtraerAtencionPeriodicaVariable(extremidad, semestre, where, semTrim);
                this.grdPeriodico.setModel(dfm);
                dfm.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Apellido", "Rut", "Sector", "Area", "Jefe Area", "Fecha", "Sem. del AÃ±o",
                    "Sem. del Mes", "Semestre", "Lugar Incidente", "Detalles", "Lesion", "Incidente", "Extremidad", "Paramedico", "Tratamiento", "Comentario"});
                try {
                    while (rsExtr.next()) {
                        nombre = Utils.convertToMayus(rsExtr.getString("nombre"));
                        apellido = Utils.convertToMayus(rsExtr.getString("apellido"));
                        countRs++;
                        dfm.addRow(new Object[]{cont++, nombre, apellido,
                            rsExtr.getInt("rut"), rsExtr.getString("sector"), rsExtr.getString("area"), rsExtr.getString("jefe_area"),
                            rsExtr.getString("fecha"), rsExtr.getString("periodo_del_anio"), rsExtr.getString("periodo_del_mes"), rsExtr.getString("semestre"),
                            rsExtr.getString("lugarincidente"), rsExtr.getString("detalles"), rsExtr.getString("lesion"), rsExtr.getString("incidente"),
                            rsExtr.getString("extremidad"), rsExtr.getString("paramedico"), rsExtr.getString("tratamiento"), rsExtr.getString("comentario")});
                    }
                    if (countRs <= 0) {
                        Utils.showMessageInfo("No existen reportes para los filtros seleccionados.", "Sin reportes");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                columna.setAnchoColumnasPeriodico(grdPeriodico);
            } else if (rdTipo.isSelected()) {
                countRs = 0;
                where = "incidente";
                semTrim = "semestre";
                ResultSet rsTip;
                rsTip = query.ExtraerAtencionPeriodicaVariable(tipo, semestre, where, semTrim);
                this.grdPeriodico.removeAll();
                this.grdPeriodico.setModel(dfm);
                dfm.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Apellido", "Rut", "Sector", "Area", "Jefe Area", "Fecha", "Sem. del AÃ±o",
                    "Sem. del Mes", "Semestre", "Lugar Incidente", "Detalles", "Lesion", "Incidente", "Extremidad", "Paramedico", "Tratamiento", "Comentario"});
                try {
                    while (rsTip.next()) {
                        nombre = Utils.convertToMayus(rsTip.getString("nombre"));
                        apellido = Utils.convertToMayus(rsTip.getString("apellido"));
                        countRs++;
                        dfm.addRow(new Object[]{cont++, nombre, apellido,
                            rsTip.getInt("rut"), rsTip.getString("sector"), rsTip.getString("area"), rsTip.getString("jefe_area"),
                            rsTip.getString("fecha"), rsTip.getString("periodo_del_anio"), rsTip.getString("periodo_del_mes"), rsTip.getString("semestre"),
                            rsTip.getString("lugarincidente"), rsTip.getString("detalles"), rsTip.getString("lesion"), rsTip.getString("incidente"),
                            rsTip.getString("extremidad"), rsTip.getString("paramedico"), rsTip.getString("tratamiento"), rsTip.getString("comentario")});
                    }
                    if (countRs <= 0) {
                        Utils.showMessageInfo("No existen reportes para los filtros seleccionados.", "Sin reportes");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                columna.setAnchoColumnasPeriodico(grdPeriodico);
            } else if (rdArea.isSelected()) {
                countRs = 0;
                where = "area";
                semTrim = "semestre";
                ResultSet rsArea;
                rsArea = query.ExtraerAtencionPeriodicaVariable(area, semestre, where, semTrim);
                this.grdPeriodico.removeAll();
                this.grdPeriodico.setModel(dfm);
                dfm.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Apellido", "Rut", "Sector", "Area", "Jefe Area", "Fecha", "Sem. del AÃ±o",
                    "Sem. del Mes", "Semestre", "Lugar Incidente", "Detalles", "Lesion", "Incidente", "Extremidad", "Paramedico", "Tratamiento", "Comentario"});
                try {
                    while (rsArea.next()) {
                        nombre = Utils.convertToMayus(rsArea.getString("nombre"));
                        apellido = Utils.convertToMayus(rsArea.getString("apellido"));
                        countRs++;
                        dfm.addRow(new Object[]{cont++, nombre, apellido,
                            rsArea.getInt("rut"), rsArea.getString("sector"), rsArea.getString("area"), rsArea.getString("jefe_area"),
                            rsArea.getString("fecha"), rsArea.getString("periodo_del_anio"), rsArea.getString("periodo_del_mes"), rsArea.getString("semestre"),
                            rsArea.getString("lugarincidente"), rsArea.getString("detalles"), rsArea.getString("lesion"), rsArea.getString("incidente"),
                            rsArea.getString("extremidad"), rsArea.getString("paramedico"), rsArea.getString("tratamiento"), rsArea.getString("comentario")});
                    }
                    if (countRs <= 0) {
                        Utils.showMessageInfo("No existen reportes para los filtros seleccionados.", "Sin reportes");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                columna.setAnchoColumnasPeriodico(grdPeriodico);
            } else if (rdSector.isSelected()) {
                countRs = 0;
                where = "sector";
                semTrim = "semestre";
                ResultSet rsSec;
                rsSec = query.ExtraerAtencionPeriodicaVariable(sector, semestre, where, semTrim);
                this.grdPeriodico.setModel(dfm);
                dfm.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Apellido", "Rut", "Sector", "Area", "Jefe Area", "Fecha", "Sem. del AÃ±o",
                    "Sem. del Mes", "Semestre", "Lugar Incidente", "Detalles", "Lesion", "Incidente", "Extremidad", "Paramedico", "Tratamiento", "Comentario"});
                try {
                    while (rsSec.next()) {
                        nombre = Utils.convertToMayus(rsSec.getString("nombre"));
                        apellido = Utils.convertToMayus(rsSec.getString("apellido"));
                        countRs++;
                        dfm.addRow(new Object[]{cont++, nombre, apellido,
                            rsSec.getInt("rut"), rsSec.getString("sector"), rsSec.getString("area"), rsSec.getString("jefe_area"),
                            rsSec.getString("fecha"), rsSec.getString("periodo_del_anio"), rsSec.getString("periodo_del_mes"), rsSec.getString("semestre"),
                            rsSec.getString("lugarincidente"), rsSec.getString("detalles"), rsSec.getString("lesion"), rsSec.getString("incidente"),
                            rsSec.getString("extremidad"), rsSec.getString("paramedico"), rsSec.getString("tratamiento"), rsSec.getString("comentario")});
                    }
                    if (countRs <= 0) {
                        Utils.showMessageInfo("No existen reportes para los filtros seleccionados.", "Sin reportes");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                columna.setAnchoColumnasPeriodico(grdPeriodico);
            }
        } //Semestrales Con Filtro semana
        else if (rdSemestral.isSelected() && checkSemana) {

            if (rdExtremidad.isSelected()) {
                countRs = 0;
                where = "extremidad";
                semTrim = "semestre";
                ResultSet rsExt;
                rsExt = query.ExtraerAtencionPeriodicaSemanaVariable(extremidad, semestre, semana, where, semTrim);
                this.grdPeriodico.setModel(dfm);
                dfm.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Apellido", "Rut", "Sector", "Area", "Jefe Area", "Fecha", "Sem. del AÃ±o",
                    "Sem. del Mes", "Semestre", "Lugar Incidente", "Detalles", "Lesion", "Incidente", "Extremidad", "Paramedico", "Tratamiento", "Comentario"});
                try {
                    while (rsExt.next()) {
                        nombre = Utils.convertToMayus(rsExt.getString("nombre"));
                        apellido = Utils.convertToMayus(rsExt.getString("apellido"));
                        countRs++;
                        dfm.addRow(new Object[]{cont++, nombre, apellido,
                            rsExt.getInt("rut"), rsExt.getString("sector"), rsExt.getString("area"), rsExt.getString("jefe_area"),
                            rsExt.getString("fecha"), rsExt.getString("periodo_del_anio"), rsExt.getString("periodo_del_mes"), rsExt.getString("semestre"),
                            rsExt.getString("lugarincidente"), rsExt.getString("detalles"), rsExt.getString("lesion"), rsExt.getString("incidente"),
                            rsExt.getString("extremidad"), rsExt.getString("paramedico"), rsExt.getString("tratamiento"), rsExt.getString("comentario")});
                    }
                    if (countRs <= 0) {
                        Utils.showMessageInfo("No existen reportes para los filtros seleccionados.", "Sin reportes");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } 
                columna.setAnchoColumnasPeriodico(grdPeriodico);
            } else if (rdTipo.isSelected()) {
                countRs = 0;
                where = "incidente";
                semTrim = "semestre";
                ResultSet rsTip;
                rsTip = query.ExtraerAtencionPeriodicaSemanaVariable(tipo, semestre, semana, where, semTrim);
                this.grdPeriodico.setModel(dfm);
                dfm.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Apellido", "Rut", "Sector", "Area", "Jefe Area", "Fecha", "Sem. del AÃ±o",
                    "Sem. del Mes", "Semestre", "Lugar Incidente", "Detalles", "Lesion", "Incidente", "Extremidad", "Paramedico", "Tratamiento", "Comentario"});
                try {
                    while (rsTip.next()) {
                        nombre = Utils.convertToMayus(rsTip.getString("nombre"));
                        apellido = Utils.convertToMayus(rsTip.getString("apellido"));
                        countRs++;
                        dfm.addRow(new Object[]{cont++, nombre, apellido,
                            rsTip.getInt("rut"), rsTip.getString("sector"), rsTip.getString("area"), rsTip.getString("jefe_area"),
                            rsTip.getString("fecha"), rsTip.getString("periodo_del_anio"), rsTip.getString("periodo_del_mes"), rsTip.getString("semestre"),
                            rsTip.getString("lugarincidente"), rsTip.getString("detalles"), rsTip.getString("lesion"), rsTip.getString("incidente"),
                            rsTip.getString("extremidad"), rsTip.getString("paramedico"), rsTip.getString("tratamiento"), rsTip.getString("comentario")});
                    }
                    if (countRs <= 0) {
                        Utils.showMessageInfo("No existen reportes para los filtros seleccionados.", "Sin reportes");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                columna.setAnchoColumnasPeriodico(grdPeriodico);
            } else if (rdArea.isSelected()) {
                countRs = 0;
                where = "area";
                semTrim = "semestre";
                ResultSet rsArea;
                rsArea = query.ExtraerAtencionPeriodicaSemanaVariable(area, semestre, semana, where, semTrim);
                this.grdPeriodico.setModel(dfm);
                dfm.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Apellido", "Rut", "Sector", "Area", "Jefe Area", "Fecha",
                    "Sem. del AÃ±o", "Sem. del Mes", "Semestre", "Lugar Incidente", "Detalles", "Lesion", "Incidente", "Extremidad", "Paramedico", "Tratamiento", "Comentario"});
                try {
                    while (rsArea.next()) {
                        nombre = Utils.convertToMayus(rsArea.getString("nombre"));
                        apellido = Utils.convertToMayus(rsArea.getString("apellido"));
                        countRs++;
                        dfm.addRow(new Object[]{cont++, nombre, apellido,
                            rsArea.getInt("rut"), rsArea.getString("sector"), rsArea.getString("area"), rsArea.getString("jefe_area"),
                            rsArea.getString("fecha"), rsArea.getString("periodo_del_anio"), rsArea.getString("periodo_del_mes"), rsArea.getString("semestre"),
                            rsArea.getString("lugarincidente"), rsArea.getString("detalles"), rsArea.getString("lesion"), rsArea.getString("incidente"),
                            rsArea.getString("extremidad"), rsArea.getString("paramedico"), rsArea.getString("tratamiento"), rsArea.getString("comentario")});
                    }
                    if (countRs <= 0) {
                        Utils.showMessageInfo("No existen reportes para los filtros seleccionados.", "Sin reportes");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                columna.setAnchoColumnasPeriodico(grdPeriodico);
            } else if (rdSector.isSelected()) {
                countRs = 0;
                where = "sector";
                semTrim = "semestre";
                ResultSet rsSec;
                rsSec = query.ExtraerAtencionPeriodicaSemanaVariable(sector, semestre, semana, where, semTrim);
                this.grdPeriodico.setModel(dfm);
                dfm.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Apellido", "Rut", "Sector", "Area", "Jefe Area", "Fecha", "Sem. del AÃ±o",
                    "Sem. del Mes", "Semestre", "Lugar Incidente", "Detalles", "Lesion", "Incidente", "Extremidad", "Paramedico", "Tratamiento", "Comentario"});
                try {
                    while (rsSec.next()) {
                        nombre = Utils.convertToMayus(rsSec.getString("nombre"));
                        apellido = Utils.convertToMayus(rsSec.getString("apellido"));
                        countRs++;
                        dfm.addRow(new Object[]{cont++, nombre, apellido,
                            rsSec.getInt("rut"), rsSec.getString("sector"), rsSec.getString("area"), rsSec.getString("jefe_area"),
                            rsSec.getString("fecha"), rsSec.getString("periodo_del_anio"), rsSec.getString("periodo_del_mes"), rsSec.getString("semestre"),
                            rsSec.getString("lugarincidente"), rsSec.getString("detalles"), rsSec.getString("lesion"), rsSec.getString("incidente"),
                            rsSec.getString("extremidad"), rsSec.getString("paramedico"), rsSec.getString("tratamiento"), rsSec.getString("comentario")});
                    }
                    if (countRs <= 0) {
                        Utils.showMessageInfo("No existen reportes para los filtros seleccionados.", "Sin reportes");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                columna.setAnchoColumnasPeriodico(grdPeriodico);
            }
        } //TRIMESTRALES
        //Trimestrales Sin Filtro Semana
        else if (rdTrimestral.isSelected() && !checkSemana) {

            if (rdExtremidad.isSelected()) {
                countRs = 0;
                semTrim = "trimestre";
                where = "extremidad";
                ResultSet rsExt2;
                rsExt2 = query.ExtraerAtencionPeriodicaVariable(extremidad, trimestre, where, semTrim);
                this.grdPeriodico.setModel(dfm);
                dfm.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Apellido", "Rut", "Sector", "Area", "Jefe Area", "Fecha", "Sem. del AÃ±o",
                    "Sem. del Mes", "Trimestre", "Lugar Incidente", "Detalles", "Lesion", "Incidente", "Extremidad", "Paramedico", "Tratamiento", "Comentario"});
                try {
                    while (rsExt2.next()) {
                        nombre = Utils.convertToMayus(rsExt2.getString("nombre"));
                        apellido = Utils.convertToMayus(rsExt2.getString("apellido"));
                        countRs++;
                        dfm.addRow(new Object[]{cont++, nombre, apellido,
                            rsExt2.getInt("rut"), rsExt2.getString("sector"), rsExt2.getString("area"), rsExt2.getString("jefe_area"),
                            rsExt2.getString("fecha"), rsExt2.getString("periodo_del_anio"), rsExt2.getString("periodo_del_mes"), rsExt2.getString("trimestre"),
                            rsExt2.getString("lugarincidente"), rsExt2.getString("detalles"), rsExt2.getString("lesion"), rsExt2.getString("incidente"),
                            rsExt2.getString("extremidad"), rsExt2.getString("paramedico"), rsExt2.getString("tratamiento"), rsExt2.getString("comentario")});
                    }
                    if (countRs <= 0) {
                        Utils.showMessageInfo("No existen reportes para los filtros seleccionados.", "Sin reportes");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                columna.setAnchoColumnasPeriodico(grdPeriodico);
            } else if (rdTipo.isSelected()) {
                countRs = 0;
                semTrim = "trimestre";
                where = "incidente";
                ResultSet rsTip;
                rsTip = query.ExtraerAtencionPeriodicaVariable(tipo, trimestre, where, semTrim);
                this.grdPeriodico.setModel(dfm);
                dfm.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Apellido", "Rut", "Sector", "Area", "Jefe Area", "Fecha", "Sem. del AÃ±o",
                    "Sem. del Mes", "Trimestre", "Lugar Incidente", "Detalles", "Lesion", "Incidente", "Extremidad", "Paramedico", "Tratamiento", "Comentario"});
                try {
                    while (rsTip.next()) {
                        nombre = Utils.convertToMayus(rsTip.getString("nombre"));
                        apellido = Utils.convertToMayus(rsTip.getString("apellido"));
                        countRs++;
                        dfm.addRow(new Object[]{cont++, nombre, apellido,
                            rsTip.getInt("rut"), rsTip.getString("sector"), rsTip.getString("area"), rsTip.getString("jefe_area"),
                            rsTip.getString("fecha"), rsTip.getString("periodo_del_anio"), rsTip.getString("periodo_del_mes"), rsTip.getString("trimestre"),
                            rsTip.getString("lugarincidente"), rsTip.getString("detalles"), rsTip.getString("lesion"), rsTip.getString("incidente"),
                            rsTip.getString("extremidad"), rsTip.getString("paramedico"), rsTip.getString("tratamiento"), rsTip.getString("comentario")});
                    }
                    if (countRs <= 0) {
                        Utils.showMessageInfo("No existen reportes para los filtros seleccionados.", "Sin reportes");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                columna.setAnchoColumnasPeriodico(grdPeriodico);
            } else if (rdArea.isSelected()) {
                countRs = 0;
                semTrim = "trimestre";
                where = "area";
                ResultSet rsArea;
                rsArea = query.ExtraerAtencionPeriodicaVariable(area, trimestre, where, semTrim);
                this.grdPeriodico.setModel(dfm);
                dfm.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Apellido", "Rut", "Sector", "Area", "Jefe Area", "Fecha", "Sem. del AÃ±o",
                    "Sem. del Mes", "Trimestre", "Lugar Incidente", "Detalles", "Lesion", "Incidente", "Extremidad", "Paramedico", "Tratamiento", "Comentario"});
                try {
                    while (rsArea.next()) {
                        nombre = Utils.convertToMayus(rsArea.getString("nombre"));
                        apellido = Utils.convertToMayus(rsArea.getString("apellido"));
                        countRs++;
                        dfm.addRow(new Object[]{cont++, nombre, apellido,
                            rsArea.getInt("rut"), rsArea.getString("sector"), rsArea.getString("area"), rsArea.getString("jefe_area"),
                            rsArea.getString("fecha"), rsArea.getString("periodo_del_anio"), rsArea.getString("periodo_del_mes"), rsArea.getString("trimestre"),
                            rsArea.getString("lugarincidente"), rsArea.getString("detalles"), rsArea.getString("lesion"), rsArea.getString("incidente"),
                            rsArea.getString("extremidad"), rsArea.getString("paramedico"), rsArea.getString("tratamiento"), rsArea.getString("comentario")});
                    }
                    if (countRs <= 0) {
                        Utils.showMessageInfo("No existen reportes para los filtros seleccionados.", "Sin reportes");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                columna.setAnchoColumnasPeriodico(grdPeriodico);
            } else if (rdSector.isSelected()) {
                countRs = 0;
                semTrim = "trimestre";
                where = "sector";
                ResultSet rsSec;
                rsSec = query.ExtraerAtencionPeriodicaVariable(sector, trimestre, where, semTrim);
                this.grdPeriodico.setModel(dfm);
                dfm.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Apellido", "Rut", "Sector", "Area", "Jefe Area", "Fecha", "Sem. del AÃ±o",
                    "Sem. del Mes", "Trimestre", "Lugar Incidente", "Detalles", "Lesion", "Incidente", "Extremidad", "Paramedico", "Tratamiento", "Comentario"});
                try {
                    while (rsSec.next()) {
                        nombre = Utils.convertToMayus(rsSec.getString("nombre"));
                        apellido = Utils.convertToMayus(rsSec.getString("apellido"));
                        countRs++;
                        dfm.addRow(new Object[]{cont++, nombre, apellido,
                            rsSec.getInt("rut"), rsSec.getString("sector"), rsSec.getString("area"), rsSec.getString("jefe_area"),
                            rsSec.getString("fecha"), rsSec.getString("periodo_del_anio"), rsSec.getString("periodo_del_mes"), rsSec.getString("trimestre"),
                            rsSec.getString("lugarincidente"), rsSec.getString("detalles"), rsSec.getString("lesion"), rsSec.getString("incidente"),
                            rsSec.getString("extremidad"), rsSec.getString("paramedico"), rsSec.getString("tratamiento"), rsSec.getString("comentario")});
                    }
                    if (countRs <= 0) {
                        Utils.showMessageInfo("No existen reportes para los filtros seleccionados.", "Sin reportes");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                columna.setAnchoColumnasPeriodico(grdPeriodico);
            }
        } 
        //Trimestrales Con Filtro semana
        else if (rdTrimestral.isSelected() && checkSemana) {

            if (rdExtremidad.isSelected()) {
                countRs = 0;
                semTrim = "trimestre";
                where = "extremidad";
                ResultSet rsExt3;
                rsExt3 = query.ExtraerAtencionPeriodicaSemanaVariable(extremidad, trimestre, semana, where, semTrim);
                this.grdPeriodico.setModel(dfm);
                dfm.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Apellido", "Rut", "Sector", "Area", "Jefe Area", "Fecha", "Sem. del AÃ±o",
                    "Sem. del Mes", "Trimestre", "Lugar Incidente", "Detalles", "Lesion", "Incidente", "Extremidad", "Paramedico", "Tratamiento", "Comentario"});
                try {
                    while (rsExt3.next()) {
                        nombre = Utils.convertToMayus(rsExt3.getString("nombre"));
                        apellido = Utils.convertToMayus(rsExt3.getString("apellido"));
                        countRs++;
                        dfm.addRow(new Object[]{cont++, nombre, apellido,
                            rsExt3.getInt("rut"), rsExt3.getString("sector"), rsExt3.getString("area"), rsExt3.getString("jefe_area"),
                            rsExt3.getString("fecha"), rsExt3.getString("periodo_del_anio"), rsExt3.getString("periodo_del_mes"), rsExt3.getString("trimestre"),
                            rsExt3.getString("lugarincidente"), rsExt3.getString("detalles"), rsExt3.getString("lesion"), rsExt3.getString("incidente"),
                            rsExt3.getString("extremidad"), rsExt3.getString("paramedico"), rsExt3.getString("tratamiento"), rsExt3.getString("comentario")});
                    }
                    if (countRs <= 0) {
                        Utils.showMessageInfo("No existen reportes para los filtros seleccionados.", "Sin reportes");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                columna.setAnchoColumnasPeriodico(grdPeriodico);
            } else if (rdTipo.isSelected()) {
                countRs = 0;
                semTrim = "trimestre";
                where = "incidente";
                ResultSet rsTip;
                rsTip = query.ExtraerAtencionPeriodicaSemanaVariable(tipo, trimestre, semana, where, semTrim);
                this.grdPeriodico.setModel(dfm);
                dfm.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Apellido", "Rut", "Sector", "Area", "Jefe Area", "Fecha", "Sem. del AÃ±o",
                    "Sem. del Mes", "Trimestre", "Lugar Incidente", "Detalles", "Lesion", "Incidente", "Extremidad", "Paramedico", "Tratamiento", "Comentario"});
                try {
                    while (rsTip.next()) {
                        nombre = Utils.convertToMayus(rsTip.getString("nombre"));
                        apellido = Utils.convertToMayus(rsTip.getString("apellido"));
                        countRs++;
                        dfm.addRow(new Object[]{cont++, nombre, apellido,
                            rsTip.getInt("rut"), rsTip.getString("sector"), rsTip.getString("area"), rsTip.getString("jefe_area"),
                            rsTip.getString("fecha"), rsTip.getString("periodo_del_anio"), rsTip.getString("periodo_del_mes"), rsTip.getString("trimestre"),
                            rsTip.getString("lugarincidente"), rsTip.getString("detalles"), rsTip.getString("lesion"), rsTip.getString("incidente"),
                            rsTip.getString("extremidad"), rsTip.getString("paramedico"), rsTip.getString("tratamiento"), rsTip.getString("comentario")});
                    }
                    if (countRs <= 0) {
                        Utils.showMessageInfo("No existen reportes para los filtros seleccionados.", "Sin reportes");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                columna.setAnchoColumnasPeriodico(grdPeriodico);
            } else if (rdArea.isSelected()) {
                countRs = 0;
                semTrim = "trimestre";
                where = "area";
                ResultSet rsArea;
                rsArea = query.ExtraerAtencionPeriodicaSemanaVariable(area, trimestre, semana, where, semTrim);
                this.grdPeriodico.setModel(dfm);
                dfm.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Apellido", "Rut", "Sector", "Area", "Jefe Area", "Fecha", "Sem. del AÃ±o",
                    "Sem. del Mes", "Trimestre", "Lugar Incidente", "Detalles", "Lesion", "Incidente", "Extremidad", "Paramedico", "Tratamiento", "Comentario"});
                try {
                    while (rsArea.next()) {
                        nombre = Utils.convertToMayus(rsArea.getString("nombre"));
                        apellido = Utils.convertToMayus(rsArea.getString("apellido"));
                        countRs++;
                        dfm.addRow(new Object[]{cont++, nombre, apellido,
                            rsArea.getInt("rut"), rsArea.getString("sector"), rsArea.getString("area"), rsArea.getString("jefe_area"),
                            rsArea.getString("fecha"), rsArea.getString("periodo_del_anio"), rsArea.getString("periodo_del_mes"), rsArea.getString("trimestre"),
                            rsArea.getString("lugarincidente"), rsArea.getString("detalles"), rsArea.getString("lesion"), rsArea.getString("incidente"),
                            rsArea.getString("extremidad"), rsArea.getString("paramedico"), rsArea.getString("tratamiento"), rsArea.getString("comentario")});
                    }
                    if (countRs <= 0) {
                        Utils.showMessageInfo("No existen reportes para los filtros seleccionados.", "Sin reportes");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                columna.setAnchoColumnasPeriodico(grdPeriodico);
            } else if (rdSector.isSelected()) {
                countRs = 0;
                semTrim = "trimestre";
                where = "sector";
                ResultSet rsSec;
                rsSec = query.ExtraerAtencionPeriodicaSemanaVariable(sector, trimestre, semana, where, semTrim);
                this.grdPeriodico.setModel(dfm);
                dfm.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Apellido", "Rut", "Sector", "Area", "Jefe Area", "Fecha", "Sem. del AÃ±o",
                    "Sem. del Mes", "Trimestre", "Lugar Incidente", "Detalles", "Lesion", "Incidente", "Extremidad", "Paramedico", "Tratamiento", "Comentario"});
                try {
                    while (rsSec.next()) {
                        nombre = Utils.convertToMayus(rsSec.getString("nombre"));
                        apellido = Utils.convertToMayus(rsSec.getString("apellido"));
                        countRs++;
                        dfm.addRow(new Object[]{cont++, nombre, apellido,
                            rsSec.getInt("rut"), rsSec.getString("sector"), rsSec.getString("area"), rsSec.getString("jefe_area"),
                            rsSec.getString("fecha"), rsSec.getString("periodo_del_anio"), rsSec.getString("periodo_del_mes"), rsSec.getString("trimestre"),
                            rsSec.getString("lugarincidente"), rsSec.getString("detalles"), rsSec.getString("lesion"), rsSec.getString("incidente"),
                            rsSec.getString("extremidad"), rsSec.getString("paramedico"), rsSec.getString("tratamiento"), rsSec.getString("comentario")});
                    }
                    if (countRs <= 0) {
                        Utils.showMessageInfo("No existen reportes para los filtros seleccionados.", "Sin reportes");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                columna.setAnchoColumnasPeriodico(grdPeriodico);
            }
        } else {
            this.grdPeriodico.setModel(dfm);
            dfm.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Apellido", "Rut", "Sector", "Area", "Jefe Area", "Fecha", "Sem. del AÃ±o",
                "Sem. del Mes", "Trimestre", "Lugar Incidente", "Detalles", "Lesion", "Incidente", "Extremidad", "Paramedico", "Tratamiento", "Comentario"});
            Utils.showMessageWarning("Debe seleccionar algun filtro para poder mostrar reportes especificos", "Advertencia");
        }
    }//GEN-LAST:event_btnFiltrarActionPerformed

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        // TODO add your handling code here:
        barraProgreso = this.progressPeriodico;
        grid = this.grdPeriodico;
        
        try {
            Thread t = new Thread() {

                public void run() {
                    seleccionado.setSelectedFile(new File("Atenciones_Periodicas.xlsx"));
                    if (seleccionado.showDialog(null, "Guardar Archivo") == JFileChooser.APPROVE_OPTION) {
                        archivo = seleccionado.getSelectedFile();
                        barraProgreso.setStringPainted(true);
                        String rutaNombreArchivo = archivo.toString();

                        Workbook wb = null;
                        try {
                            wb = new XSSFWorkbook(OPCPackage.open("templates\\template_atencion_periodico.xlsx"));
                        } catch (Exception ex) {
                            Logger.getLogger(MenuMassAnual.class.getName()).log(Level.SEVERE, null, ex);
                            System.out.println("No se encuentra el archivo de template");
                        }
                        Sheet hoja = wb.getSheetAt(0);

                        barraProgreso.setMaximum(grid.getRowCount());
                        XSSFRow filas;
                        Rectangle rect;
                        for (int i = 0; i < grid.getRowCount(); i++) {

                            rect = grid.getCellRect(i, 0, true);
                            grid.setRowSelectionInterval(i, i);
                            barraProgreso.setValue(i + 1);

                            filas = (XSSFRow) hoja.createRow(i + 5);
                            for (int x = 1; x < 19; x++) {
                                filas.createCell(x).setCellValue(grid.getValueAt(i, x).toString());
                            }

                            try {
                                Thread.sleep(6);
                            } catch (Exception e) {
                            }
                        }
                        barraProgreso.setValue(0);

                        //Guarda Reportes en el excel de la ruta especificado al comienzo del metodo
                        try {
                            wb.write(new FileOutputStream(rutaNombreArchivo));
                        } catch (Exception ex) {
                            Logger.getLogger(MenuMassAnual.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        //Opcion para abrir el archivo exportado
                        Utils util = new Utils();
                        boolean respuesta = util.showMessageOption("Â¿Desea visualizar el archivo guardado?", "Archivo exportado exitosamente");
                        if (respuesta) {
                            try {
                                Desktop.getDesktop().open(archivo);
                                barraProgreso.setStringPainted(false);
                            } catch (Exception ex) {
                                Logger.getLogger(MenuMassAnual.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            barraProgreso.setStringPainted(false);
                        }
                    }
                }
            };
            t.start();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnExportarActionPerformed

    private void rdTipoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdTipoMouseClicked
        // TODO add your handling code here:
        this.boxOpcion.removeAllItems();
        Conexion cn = new Conexion();
        ResultSet rs2;
        rs2 = cn.ExtraerIncidente();
        try {
            while (rs2.next()) {
                boxOpcion.addItem(rs2.getString("tipo"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_rdTipoMouseClicked

    private void rdAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdAreaMouseClicked
        // TODO add your handling code here:
        this.boxOpcion.removeAllItems();
        Conexion cn = new Conexion();
        ResultSet rs3;
        rs3 = cn.ExtraerArea();
        try {
            while (rs3.next()) {
                this.boxOpcion.addItem(rs3.getString("nombre_area"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_rdAreaMouseClicked

    private void rdSectorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdSectorMouseClicked
        // TODO add your handling code here:
        this.boxOpcion.removeAllItems();
        Conexion cn = new Conexion();
        ResultSet rs4;
        rs4 = cn.ExtraerSector();
        try {
            while (rs4.next()) {
                this.boxOpcion.addItem(rs4.getString("nombre_sector"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_rdSectorMouseClicked

    private void rdExtremidadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdExtremidadMouseClicked
        // TODO add your handling code here:
        this.boxOpcion.removeAllItems();
        Conexion cn = new Conexion();
        ResultSet rs5;
        rs5 = cn.ExtraerExtremidad();
        try {
            while (rs5.next()) {
                this.boxOpcion.addItem(rs5.getString("nombre"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_rdExtremidadMouseClicked

    private void rdSemestralMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdSemestralMouseClicked
        // TODO add your handling code here:
        this.boxSemTrim.removeAllItems();
        QuerysPeriodicas query = new QuerysPeriodicas();
        ResultSet rs6;
        rs6 = query.ExtraerSemestreMsg();
        try {
            while (rs6.next()) {
                this.boxSemTrim.addItem(rs6.getString("semestre_msg"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_rdSemestralMouseClicked

    private void rdTrimestralMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdTrimestralMouseClicked
        // TODO add your handling code here:
        this.boxSemTrim.removeAllItems();
        QuerysPeriodicas query = new QuerysPeriodicas();
        ResultSet rs7;
        rs7 = query.ExtraerTrimestreMsg();
        try {
            while (rs7.next()) {
                this.boxSemTrim.addItem(rs7.getString("trimestre_msg"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_rdTrimestralMouseClicked

    private void boxSemTrimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxSemTrimActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_boxSemTrimActionPerformed

    private void chkSemanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSemanaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkSemanaActionPerformed

    private void chkSemanaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkSemanaMouseClicked
        // TODO add your handling code here:
        //Al seleccionar el checbox Semanal
        if (this.chkSemana.isSelected()) {
            this.boxSemana.setVisible(true);
        } else {
            this.boxSemana.setVisible(false);
        }
    }//GEN-LAST:event_chkSemanaMouseClicked

    private void boxSemTrimItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_boxSemTrimItemStateChanged
        // TODO add your handling code here:
        QuerysPeriodicas query = new QuerysPeriodicas();
        ResultSet rs = null;
        //AL HACER CLIC EN EL RADBUTTON SEMESTRAL
        if (rdSemestral.isSelected()) {
            this.boxSemana.removeAllItems();
            String semestre = (String) boxSemTrim.getSelectedItem();
            rs = query.ExtraerPeriodosSemestre(semestre);
            try {
                while (rs.next()) {
                    this.boxSemana.addItem(rs.getString("periodo_del_anio"));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } //AL HACER CLIC EN EL RADBUTTON SEMESTRAL
        else if (rdTrimestral.isSelected()) {
            this.boxSemana.removeAllItems();
            String trimestre = (String) boxSemTrim.getSelectedItem();
            rs = query.ExtraerPeriodosTrimestre(trimestre);
            try {
                while (rs.next()) {
                    this.boxSemana.addItem(rs.getString("periodo_del_anio"));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_boxSemTrimItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox boxOpcion;
    private javax.swing.JComboBox boxSemTrim;
    private javax.swing.JComboBox boxSemana;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnFiltrar;
    private javax.swing.JCheckBox chkSemana;
    private javax.swing.JTable grdPeriodico;
    private javax.swing.ButtonGroup grupoPrimero;
    private javax.swing.ButtonGroup grupoSegundo;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelTipo;
    private javax.swing.JProgressBar progressPeriodico;
    private javax.swing.JRadioButton rdArea;
    private javax.swing.JRadioButton rdExtremidad;
    private javax.swing.JRadioButton rdSector;
    private javax.swing.JRadioButton rdSemestral;
    private javax.swing.JRadioButton rdTipo;
    private javax.swing.JRadioButton rdTrimestral;
    // End of variables declaration//GEN-END:variables
}
